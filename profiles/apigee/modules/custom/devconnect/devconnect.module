<?php

/**
 * Implements hook_init().
 *
 * Registers our custom autoloader.
 */
function devconnect_init() {
  static $already_booted = FALSE;
  if (!$already_booted) {
    $lib_dir = libraries_get_path('mgmt-api-php-sdk');
    // During migrations, we might get an empty lib dir due to bad cached
    // install_profile value.
    if (empty($lib_dir)) {
      $lib_dir = 'profiles/apigee/libraries/mgmt-api-php-sdk';
    }
    require_once $lib_dir . '/vendor/autoload.php';
    $already_booted = TRUE;
    $key = variable_get('apigee_crypt_key', NULL);
    if (empty($key)) {
      $key = hash('SHA256', 'w3-Love_ap|s', TRUE);
    }
    Apigee\Util\Crypto::setKey($key);
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Denies access to PHP execution URL in the devel module if it is enabled.
 *
 * @param $items
 */
function devconnect_menu_alter(&$items) {
  if (isset($items['devel/php'])) {
    $items['devel/php']['access callback'] = FALSE;
  }
}

function devconnect_menu() {
  $items = array();
  $items['admin/config/devconnect'] = array(
    'title' => 'Dev Portal Settings',
    'description' => 'Apigee Edge authentication settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_admin_form'),
    'access arguments' => array('administer organization settings')
  );
  return $items;
}

/**
 * Implements hook_filter_info_alter().
 *
 * Removes Display Suite and PHP Code filters if they are enabled, because
 * they expose security vulnerabilities.
 *
 * @TODO: devconnect_downloads currently relies on presence of ds_code filter.
 *        That module should be reworked so that this is no longer the case,
 *        then the conditional below should be removed.
 *
 * @param $info
 */
function devconnect_filter_info_alter(&$info) {
  if (!module_exists('devconnect_downloads')) {
    if (array_key_exists('ds_code', $info)) {
      unset ($info['ds_code']);
    }
  }
  if (array_key_exists('php_code', $info)) {
    unset($info['php_code']);
  }
}

/**
 * Implements hook_variable_group_info().
 *
 * @return array
 */
function devconnect_variable_group_info() {
  $groups['devconnect'] = array(
    'title' => t('Devconnect settings'),
    'description' => t('Settings for this Devconnect instance. Change these values with great care!'),
    'access' => 'administer organization settings',
    'path' => array('admin/config/devconnect'),
  );
  return $groups;
}

function devconnect_admin_form($form, &$form_state) {
  if (isset($form_state['input']['org_settings'])) {
    $org_settings = $form_state['input']['org_settings'][0];
/*
    if ($form_state['rebuild'] === TRUE) {
      $defaults = devconnect_get_org_settings();
      $org_settings['pass'] = $defaults['pass'];
    }
*/
  }
  else {
    $org_settings =& devconnect_get_org_settings();
  }

  $form['original_org_settings'] = array(
    '#type' => 'value',
    '#value' => $org_settings
  );

  $form['connection_config_container'] = array(
    '#title' => t('Connection Configuration'),
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#id' => 'edit-connection-config-container',
    'org_settings' => array(
      '#tree' => TRUE,
    )
  );
  $element =& $form['connection_config_container']['org_settings'][0];
  $element['org'] = array(
    '#type' => 'textfield',
    '#title' => t('Dev Portal Organization'),
    '#required' => TRUE,
    '#default_value' => $org_settings['org'],
    '#description' => t('The v4 product organization name. Changing this value could make your site not work.'),
    '#weight' => -6
  );
  $element['endpoint'] = array(
    '#type' => 'textfield',
    '#title' => t('Dev Portal Endpoint URL'),
    '#required' => TRUE,
    '#default_value' => $org_settings['endpoint'],
    '#description' => t('URL to which to make Apigee REST calls.'),
    '#weight' => -5
  );

  $element['user'] = array(
    '#type' => 'textfield',
    '#title' => t('Endpoint Authenticated User'),
    '#required' => TRUE,
    '#default_value' => ($org_settings['user'] == 'fixme' ? '' : $org_settings['user']),
    '#description' => t('User name used when authenticating with the endpoint. Generally this takes the form of an email address.'),
    '#weight' => -4
  );

  $element['pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Authenticated User’s Password'),
    '#required' => TRUE,
    '#default_value' => ($org_settings['pass'] == 'secret' ? '' : $org_settings['pass']),
    '#description' => t('Password used when authenticating with the endpoint.'),
    '#weight' => -3,
    '#post_render' => array('devconnect_password_post_render')
  );

  $conn_timeout = intval($org_settings['conn_timeout']);
  if ($conn_timeout < 1) {
    $conn_timeout = 8;
  }
  $req_timeout = intval($org_settings['req_timeout']);
  if ($req_timeout < 1) {
    $req_timeout = 8;
  }

  $form['connection_config_container']['connection_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Connection Timeout'),
    '#required' => TRUE,
    '#default_value' => $conn_timeout,
    '#description' => t('Number of seconds before an HTTP connection to Edge is assumed to have timed out.'),
    '#weight' => -2,
    '#post_render' => array('devconnect_number_post_render')
  );

  $form['connection_config_container']['request_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Request Timeout'),
    '#required' => TRUE,
    '#default_value' => $req_timeout,
    '#description' => t('Number of seconds before an HTTP response from Edge is assumed to have timed out.'),
    '#weight' => -1,
    '#post_render' => array('devconnect_number_post_render')
  );

  $form['connection_config_container']['log_threshold'] = array(
    '#type' => 'radios',
    '#title' => t('Edge logging threshold'),
    '#description' => t('Controls what baseline level of Edge output should be written to the logs.'),
    '#required' => TRUE,
    '#default_value' => $org_settings['log_threshold'],
    '#options' => array(
      WATCHDOG_DEBUG => 'Debug',
      WATCHDOG_INFO => 'Info',
      WATCHDOG_NOTICE => 'Notice',
      WATCHDOG_WARNING => 'Warning',
      WATCHDOG_ERROR => 'Error',
      WATCHDOG_CRITICAL => 'Critical',
      WATCHDOG_ALERT => 'Alert',
      WATCHDOG_EMERGENCY => 'Emergency'
    ),
    '#weight' => 10
  );

  $status = _devconnect_test_kms_connection($org_settings['org'], $org_settings['endpoint'], $org_settings['user'], $org_settings['pass'], $conn_timeout);

  $form['connection_config_container']['connect_test'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test Configuration'),
    '#weight' => 9,
    '#prefix' => '<br><br>',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['connection_config_container']['connect_test']['test_connection'] = array(
    '#name' => 'test_connection',
    '#type' => 'button',
    '#limit_validation_errors' => array(),
    '#value' => t('Test Connection'),
    '#ajax' => array(
      'callback' => '_devconnect_test_management_connection_ajax',
      'wrapper' => 'test-connect-result',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $form['connection_config_container']['connect_test']['test_connection_status'] = array(
    '#prefix' => '<div id="test-connect-result"><br>',
    '#suffix' => '</div>',
    '#markup' => $status,
  );

  $modules = module_implements('variable_info');
  sort($modules); // sort by name.
  $my_variables = array();
  foreach ($modules as $module) {
    if (substr($module, 0, 10) == 'devconnect') {
      $my_variables += call_user_func($module . '_variable_info');
    }
  }

  $weight = 0;

  $form['devconnect_config_container'] = array(
    '#title' => t('Dev Portal Configuration'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  if (module_exists('devconnect_monetization')) {
    $form['monetization_config_container'] = array(
      '#title' => t('Monetization Configuration'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
  }
  foreach ($my_variables as $name => $info) {
    $default = (isset($info['default'])) ? $info['default'] : '';
    $default_value = variable_get($name, $default);
    $form_element = array();
    if ($info['type'] == 'boolean') {
      $form_element['#type'] = 'checkbox';
      $form_element['#default_value'] = intval($default_value);
      $form_element['#return_value'] = 1;
    }
    elseif ($info['type'] == 'select') {
      $form_element['#default_value'] = $default_value;
      if ((!isset($info['options']) || !is_array($info['options'])) && (isset($info['options callback']) && is_callable($info['options callback']))) {
        $form_element['#options'] = call_user_func($info['options callback']);
      }
      else {
        $form_element['#options'] = $info['options'];
      }
      // If configured default value is not a valid option, but the
      // hook_variable_info default is, use the hook_variable_info value.
      if (!array_key_exists($default_value, $form_element['#options'])) {
        if (array_key_exists($default, $form_element['#options'])) {
          $form_element['#default_value'] = $default;
        }
        else {
          // Choose the first option as a default.
          $option_values = array_keys($form_element['#options']);
          if (count($option_values) > 0) {
            $form_element['#default_value'] = $option_values[0];
          }
        }
      }
      if (count($form_element['#options']) < 7) {
        $form_element['#type'] = 'radios';
      }
      else {
        $form_element['#type'] = 'select';
      }
    }
    else {
      $form_element['#type'] = 'textfield';
      $form_element['#default_value'] = $default_value;
    }
    $form_element['#title'] = $info['title'];
    if (isset($info['description'])) {
      $form_element['#description'] = $info['description'];
    }
    if (isset($info['required'])) {
      $form_element['#required'] = $info['required'];
    }
    $form_element['#weight'] = $weight++;
    $form_element['#suffix'] = '<br/>';

    if (strpos($name, 'monetization') !== FALSE) {
      $set = 'monetization_config';
    }
    else {
      $set = 'devconnect_config';
    }
    $form[$set . '_container'][$name] = $form_element;
  }

  $form = system_settings_form($form);
  $form['#submit'] = array('devconnect_admin_form_submit');
  return $form;
}

function devconnect_admin_form_submit($form, &$form_state) {
  $config = devconnect_get_org_settings();
  $changes = array();
  $i = 0;
  $org_setting = array();
  foreach ($form_state['values']['org_settings'] as $org_config) {
    $fields = array('org', 'endpoint', 'user', 'pass');
    $old_config = array();
    if ($i == 0) {
      $fields += array('log_threshold', 'connection_timeout', 'request_timeout');
      $old_config = $config;
    }
    else {
      foreach ($config['secondary_orgs'] as $secondary_org) {
        if ($secondary_org['org'] == $org_config['org']) {
          $old_config = $secondary_org;
          break;
        }
      }
    }
    foreach ($fields as $key) {
      $value = $org_config[$key];
      switch ($key) {
        case 'org':
        case 'endpoint':
        case 'user':
        case 'pass':
          $old_value = $old_config[$key];
          if ($key == 'pass') {
            try {
              $old_value = Apigee\Util\Crypto::decrypt($old_value);
            } catch (Apigee\Exceptions\ParameterException $e) {
              $old_value = '';
            }
            if ($old_value != $value) {
              $from = (empty($old_value) ? '*empty*' : '*encrypted*');
              $changes["Connection $i: $key"] = array($from, '*encrypted*');
            }
          }
          elseif ($old_value != $value) {
            $changes["Connection $i: $key"] = array($old_value, $value);
          }
          break;
      }
      if ($key == 'pass') {
        $value = Apigee\Util\Crypto::encrypt($value);
      }
      $org_setting[$key] = $value;
      if ($i == 0) {
        $config[$key] = $value;
      }
    }
    $i++;
  }

  variable_set('devconnect_org_settings', $config);

  if (!empty($changes)) {
    $change_items = array();
    foreach ($changes as $key => $values) {
      $change_items[] = "$key was changed from “" . $values[0] . '” to “' . $values[1] . '”';
    }
    $message = 'The following authentication configuration items were changed: ' . join(',', $change_items);
    watchdog('devconnect', $message, array(), WATCHDOG_INFO);
  }
  drupal_set_message(t('Your changes have been saved.'), 'status');
}

function devconnect_password_post_render($content, $element) {
  return str_replace('type="text"', 'type="password"', $content);
}

function devconnect_number_post_render($content, $element) {
  return str_replace('type="text"', 'type="number" style="width:3em !important"', $content);
}

/**
 * Ajax Callback for Testing the Edge Connection
 */
function _devconnect_test_management_connection_ajax($form, &$form_state) {
  return $form['connection_config_container']['connect_test']['test_connection_status'];
}

/**
 * Test connection with the Management server
 *
 * @param string $org - Organization that user has supplied
 * @param string $endpoint - Endpoint that user has supplied
 * @param string $user - Username that the user has supplied
 * @param string $pass - Password (unencrypted) that the user has supplied
 * @param int $timeout - Number of seconds until connection timeout, or zero for infinite
 * @return string
 */
function _devconnect_test_kms_connection($org, $endpoint, $user, $pass, $timeout = 4) {
  if (!valid_url($endpoint)) {
    return '<span style="color:red">' . t('Invalid endpoint') . '</span>';
  }
  // Make sure timeout does not exceed 8 seconds, or failure ensues.
  $timeout = intval(min($timeout, 8));
  // Zero timeout is infinite; big problem.
  if ($timeout < 1) {
    $timeout = 4;
  }

  $options = array(
    'http_options' => array(
      'connection_timeout' => $timeout,
      'follow_location' => FALSE,
    )
  );

  $config = new Apigee\Util\OrgConfig($org, $endpoint, $user, $pass, $options);
  $org = new Apigee\ManagementAPI\Organization($config);

  try {
    $org->load();
    return '<span style="color:green">' . t('Connection Successful') . '</span>';
  } catch (\Apigee\Exceptions\ResponseException $e) {
    if ($e->getCode() == 302 && strpos($org, 'https') == 0) {
      $message = t('DevPortal Endpoint seems to be SSL enabled. Try <strong style="color:green"><em>@endpoint</em></strong> instead.',
        array('@endpoint' => str_replace('http', 'https', $endpoint))
      );
      return '<span style="color:orange">' . $message . '</span>';
    }
    return '<span style="color:red">' . t('Connection Unsuccessful: ' . $e->getCode()) . '</span>';
  }
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function devconnect_permission() {
  return array(
    'administer organization settings' => array(
      'title' => 'Administer organization settings',
      'restrict access' => TRUE,
    ),
    'view devconnect errors' => array(
      'title' => 'View DevConnect error detail',
      'restrict access' => TRUE
    )
  );
}

/**
 * Implements hook_cron.
 */
function devconnect_cron() {
  // query & store environments
  try {
    $dev_app = new Apigee\ManagementAPI\DeveloperAppAnalytics(devconnect_default_org_config());
    $environments = $dev_app->queryEnvironments();
    variable_set('devconnect_org_environments', $environments);
  } catch (Exception $e) {
    // Ignore any exceptions thrown. These probably result from
    // misconfiguration of the endpoint.
  }
}


/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function devconnect_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login') {
    $form['userpasswordlink'] = array(
      '#markup' => '<br>' . l('Forgot your password?', 'user/password') . '<br><br>',
      '#weight' => 100
    );
  }
}

/**
 * Implements hook_theme().
 *
 * @return array
 */
function devconnect_theme() {
  $items = array();
  $tpl_path = drupal_get_path('module', 'devconnect') . '/templates';
  $items['devconnect_error_inline'] = array(
    'path' => $tpl_path,
    'template' => 'devconnect_error_inline',
    'variables' => array('summary' => NULL, 'detail' => NULL),
  );
  $items['devconnect_error_message'] = array(
    'path' => $tpl_path,
    'template' => 'devconnect_error_message',
    'variables' => array('summary' => NULL, 'detail' => NULL, 'severity' => 'error'),
  );
  return $items;
}

/**
 * Backwards-compatibility wrapper for devconnect_default_org_config().
 *
 * Use devconnect_default_org_config() instead for all new code.
 *
 * @return \Apigee\Util\OrgConfig
 * @deprecated
 */
function devconnect_default_api_client() {
  return devconnect_default_org_config();
}

/**
 * Returns a wrapper around org connection settings.
 *
 * @param string $requested_org
 * @return Apigee\Util\OrgConfig
 */
function devconnect_default_org_config($requested_org = 'default') {
  static $configs = array();

  if (!array_key_exists($requested_org, $configs)) {
    $settings = devconnect_get_org_settings();
    drupal_alter('devconnect_org_settings', $settings, $requested_org);

    $info = system_get_info('module', 'devconnect');

    $logger = new Apigee\Drupal\WatchdogLogger();
    $logger::setLogThreshold($settings['log_threshold']);
    $user_mail = user_is_logged_in() ? $GLOBALS['user']->mail : NULL;

    $adapter = new \Guzzle\Log\PsrLogAdapter($logger);
    $message = '<pre>' . \Guzzle\Log\MessageFormatter::DEBUG_FORMAT . '</pre>';
    $guzzle_log_plugin = new \Guzzle\Plugin\Log\LogPlugin($adapter, $message);

    $options = array(
      'logger' => $logger,
      'user_mail' => $user_mail,
      'subscribers' => array($guzzle_log_plugin),
      'http_options' => array(
        'connection_timeout' => intval($settings['connection_timeout']),
        'timeout' => intval($settings['request_timeout'])
      ),
      'user_agent' => 'devconnect/' . $info['version'],
      'variable_store' => new Apigee\Drupal\VariableCache(),
    );
    if (function_exists('devconnect_debug_register')) {
      $options['debug_callbacks'] = array('devconnect_debug_register');
    }
    $configs[$requested_org] = new Apigee\Util\OrgConfig($settings['org'], $settings['endpoint'], $settings['user'], $settings['pass'], $options);
  }
  return $configs[$requested_org];
}

/**
 * Logs use of deprecated classes and functions (from pre-R21 days)
 * so that we can bring CS code up to current standards.
 */
function _devconnect_warn_deprecated() {
  if (version_compare(PHP_VERSION, '5.4', '>=')) {
    // Be more efficient when running PHP 5.4
    $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 2);
  }
  elseif (version_compare(PHP_VERSION, '5.3.6', '>=')) {
    // Sigh. Pull entire backtrace.
    $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
  }
  else {
    // We are dealing with real dinosaurs here. Be even less efficient.
    // PHP < 5.3.6 does not support any args to debug_backtrace().
    $backtrace = debug_backtrace();
  }
  $frame = $backtrace[1];

  if (isset($frame['class'])) {
    $subject = 'class ' . $frame['class'];
    $verb = 'instantiated';
  }
  else {
    $subject = 'function ' . $frame['function'];
    $verb = 'invoked';
  }
  $message = 'Deprecated %subject was %verb in file %file, line %line.';
  $args = array(
    '%subject' => $subject,
    '%verb' => $verb,
    '%file' => $frame['file'],
    '%line' => $frame['line']
  );
  devconnect_default_org_config()->logger->warning(t($message, $args), array('type' => 'devconnect'));
}

/**
 * Common error/notification handler for Edge faults.
 *
 * Invokes hook_devconnect_error_alter() to change how messages are displayed.
 *
 * @param int $error_code
 * @param string $summary
 * @param string $details
 * @param int $severity
 * @param int $display
 * @return bool|string
 */
function devconnect_notify($error_code, $summary, $details, $severity = Apigee\Util\ErrorHandling::SEVERITY_ERROR, $display = Apigee\Util\ErrorHandling::DISPLAY_MESSAGE) {
  drupal_alter('devconnect_error', $error_code, $summary, $details, $severity, $display);

  switch ($severity) {
    case Apigee\Util\ErrorHandling::SEVERITY_STATUS:
      $message_type = 'status';
      break;
    case Apigee\Util\ErrorHandling::SEVERITY_WARNING:
      $message_type = 'warning';
      break;
    default:
      $message_type = 'error';
      break;
  }
  if (!user_access('view devconnect errors')) {
    $details = NULL;
  }
  if ($display == Apigee\Util\ErrorHandling::DISPLAY_MESSAGE) {
    $formatted_message = theme('devconnect_error_message', array('summary' => $summary, 'detail' => $details));
    drupal_set_message($formatted_message, $message_type);
    return FALSE;
  }
  return theme('devconnect_error_inline', array(
    'summary' => $summary,
    'detail' => $details,
    'severity' => $message_type
  ));
}

function devconnect_get_debug_data() {
  return Apigee\Util\DebugData::toArray();
}

function devconnect_get_org_settings() {
  $custom_vars = variable_get('devconnect_org_settings', NULL);
  $settings_saved = !empty($custom_vars);
  if (!$settings_saved) {
    $possible_paths = array('sites/default/private', 'sites/default/files/private');
    $private_filesystem = variable_get('file_private_path', NULL);
    if ($private_filesystem) {
      array_unshift($possible_paths, $private_filesystem);
    }
    foreach ($possible_paths as $config_path) {
      if (file_exists("$config_path/config/active/devconnect.settings.yml")) {
        $custom_vars = Symfony\Component\Yaml\Yaml::parse("$config_path/config/active/devconnect.settings.yml");
        break;
      }
    }
  }
  if (empty($custom_vars)) {
    $custom_vars = array(
      'org' => '',
      'user' => '',
      'endpoint' => 'https://api.enterprise.apigee.com/v1',
      'pass' => '',
      'log_threshold' => 4,
      'connection_timeout' => 4,
      'request_timeout' => 4
    );
  }
  elseif (array_key_exists('pass', $custom_vars) && defined('MCRYPT_RIJNDAEL_128')) {
    try {
      $pass = Apigee\Util\Crypto::decrypt($custom_vars['pass']);
      if ($pass) {
        $custom_vars['pass'] = $pass;
      }
    } catch (Exception $e) {
    }
  }
  if (!$settings_saved) {
    variable_set('devconnect_org_settings', $custom_vars);
  }
  return $custom_vars;
}