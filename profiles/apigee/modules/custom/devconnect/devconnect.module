<?php

// These constants are deprecated and will be removed in R25.
define('DEVCONNECT_APIGEE_DEFAULT_USER', 'fixme');
define('DEVCONNECT_APIGEE_DEFAULT_PASSWORD', 'fnt996QUJucOlMGEkYOp5wGwcwNGdfcOX3dZutRJCfDQ=='); // "secret" encrypted
define('DEVCONNECT_APIGEE_DEFAULT_ENDPOINT', 'https://api.enterprise.apigee.com/v1');
define('DEVCONNECT_APIGEE_DEFAULT_ORG', 'fixme');

/**
 * Implements hook_boot().
 *
 * Registers our custom autoloader.
 */
function devconnect_boot() {
  static $already_booted = FALSE;
  if (!$already_booted) {
    // Cannot use drupal_get_path because we are too early in the boot process.
    require_once __DIR__ . '/lib/vendor/autoload.php';
    $already_booted = TRUE;
    Apigee\Util\Crypto::setKey(hash('SHA256', 'w3-Love_ap|s', TRUE));
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Denies access to PHP execution URL in the devel module if it is enabled.
 *
 * @param $items
 */
function devconnect_menu_alter(&$items) {
  if (isset($items['devel/php'])) {
    $items['devel/php']['access callback'] = FALSE;
  }
}

function devconnect_menu() {
  $items = array();
  $items['admin/config/devconnect'] = array(
    'title' => 'Dev Portal Settings',
    'description' => 'Apigee KMS authentication settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_admin_form'),
    'access arguments' => array('administer organization settings')
  );
  return $items;
}

/**
 * Implements hook_filter_info_alter().
 *
 * Removes Display Suite and PHP Code filters if they are enabled, because
 * they expose security vulnerabilities.
 *
 * @TODO: devconnect_downloads currently relies on presence of ds_code filter.
 *        That module should be reworked so that this is no longer the case,
 *        then the conditional below should be removed.
 *
 * @param $info
 */
function devconnect_filter_info_alter(&$info) {
  if (!module_exists('devconnect_downloads')) {
    if (array_key_exists('ds_code', $info)) {
      unset ($info['ds_code']);
    }
  }
  if (array_key_exists('php_code', $info)) {
    unset($info['php_code']);
  }
}

/**
 * Implements hook_variable_group_info().
 *
 * @return array
 */
function devconnect_variable_group_info() {
  $groups['devconnect'] = array(
    'title' => t('Devconnect settings'),
    'description' => t('Settings for this Devconnect instance. Change these values with great care!'),
    'access' => 'administer organization settings',
    'path' => array('admin/config/devconnect'),
  );
  return $groups;
}

function devconnect_admin_form($form, &$form_state) {

  $config = Drupal::config('devconnect.settings');

  $org = $config->get('org');
  $endpoint = $config->get('endpoint');
  $user = $config->get('user');
  $pass = Apigee\Util\Crypto::decrypt($config->get('pass'));
  $log_threshold = intval($config->get('log_threshold'));
  $conn_timeout = intval($config->get('connection_timeout'));
  $req_timeout = intval($config->get('request_timeout'));

  $form = array();

  $form['connection_config_container'] = array(
    '#title' => t('Connection Configuration'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['connection_config_container']['org'] = array(
    '#type' => 'textfield',
    '#title' => t('Dev Portal Organization'),
    '#required' => TRUE,
    '#default_value' => $org,
    '#description' => t('The v4 product organization name. Changing this value could make your site not work.'),
    '#weight' => -6
  );

  $form['connection_config_container']['endpoint'] = array(
    '#type' => 'textfield',
    '#title' => t('Dev Portal Endpoint URL'),
    '#required' => TRUE,
    '#default_value' => $endpoint,
    '#description' => t('URL to which to make Apigee REST calls.'),
    '#weight' => -5
  );

  $form['connection_config_container']['user'] = array(
    '#type' => 'textfield',
    '#title' => t('Endpoint Authenticated User'),
    '#required' => TRUE,
    '#default_value' => $user,
    '#description' => t('User name used when authenticating with the endpoint. Generally this takes the form of an email address.'),
    '#weight' => -4
  );

  $form['connection_config_container']['pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Authenticated Userâ€™s Password'),
    '#required' => TRUE,
    '#default_value' => $pass,
    '#description' => t('Password used when authenticating with the endpoint.'),
    '#weight' => -3,
    '#post_render' => array('devconnect_password_post_render')
  );

  $form['connection_config_container']['connection_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Connection Timeout'),
    '#required' => TRUE,
    '#default_value' => $conn_timeout,
    '#description' => t('Number of seconds before an HTTP connection to KMS is assumed to have timed out.'),
    '#weight' => -2,
    '#post_render' => array('devconnect_number_post_render')
  );

  $form['connection_config_container']['request_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Request Timeout'),
    '#required' => TRUE,
    '#default_value' => $req_timeout,
    '#description' => t('Number of seconds before an HTTP response from KMS is assumed to have timed out.'),
    '#weight' => -1,
    '#post_render' => array('devconnect_number_post_render')
  );

  $form['connection_config_container']['log_threshold'] = array(
    '#type' => 'radios',
    '#title' => t('KMS logging threshold'),
    '#description' => t('Controls what baseline level of KMS output should be written to the logs.'),
    '#required' => TRUE,
    '#default_value' => $log_threshold,
    '#options' => array(
      WATCHDOG_DEBUG => 'Debug',
      WATCHDOG_INFO => 'Info',
      WATCHDOG_NOTICE => 'Notice',
      WATCHDOG_WARNING => 'Warning',
      WATCHDOG_ERROR => 'Error',
      WATCHDOG_CRITICAL => 'Critical',
      WATCHDOG_ALERT => 'Alert',
      WATCHDOG_EMERGENCY => 'Emergency'
    ),
    '#weight' => 55
  );


  $form['#submit'] = array('devconnect_admin_form_submit');

  $modules = module_implements('variable_info');
  sort($modules); // sort by name.
  $my_variables = array();
  foreach ($modules as $module) {
    if (substr($module, 0, 10) == 'devconnect') {
      $my_variables += call_user_func($module . '_variable_info');
    }
  }

  $weight = 0;

  $form['devconnect_config_container'] = array(
    '#title' => t('Dev Portal Configuration'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  if (module_exists('devconnect_monetization')) {
    $form['monetization_config_container'] = array(
      '#title' => t('Monetization Configuration'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
  }
  foreach ($my_variables as $name => $info) {
    $default = (isset($info['default'])) ? $info['default'] : '';
    $default_value = variable_get($name, $default);
    $form_element = array();
    if ($info['type'] == 'boolean') {
      $form_element['#type'] = 'checkbox';
      $form_element['#default_value'] = intval($default_value);
      $form_element['#return_value'] = 1;
    }
    elseif ($info['type'] == 'select') {
      $form_element['#default_value'] = $default_value;
      if ((!isset($info['options']) || !is_array($info['options'])) && (isset($info['options callback']) && is_callable($info['options callback']))) {
        $form_element['#options'] = call_user_func($info['options callback']);
      }
      else {
        $form_element['#options'] = $info['options'];
      }
      if (count($form_element['#options']) < 7) {
        $form_element['#type'] = 'radios';
      }
      else {
        $form_element['#type'] = 'select';
      }
    }
    else {
      $form_element['#type'] = 'textfield';
      $form_element['#default_value'] = $default_value;
    }
    $form_element['#title'] = $info['title'];
    if (isset($info['description'])) {
      $form_element['#description'] = $info['description'];
    }
    if (isset($info['required'])) {
      $form_element['#required'] = $info['required'];
    }
    $form_element['#weight'] = $weight++;
    $form_element['#suffix'] = '<br/>';

    if (strpos($name, 'monetization') !== FALSE) {
      $set = 'monetization_config';
    }
    else {
      $set = 'devconnect_config';
    }
    $form[$set . '_container'][$name] = $form_element;
  }

  if (isset($form_state['storage']['connection_status'])) {
    $status = $form_state['storage']['connection_status'];
  }
  else {
    $status = _devconnect_test_kms_connection($org, $endpoint, $user, $pass, $conn_timeout);
  }

  $form['connection_config_container']['connect_test'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test Configuration'),
    '#weight' => 0,
    '#prefix' => '<br/>',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['connection_config_container']['connect_test']['test_connection'] = array(
    '#type' => 'submit',
    '#value' => t('Test Connection'),
    '#submit' => array('_devconnect_test_management_connection_submit'),
    '#ajax' => array(
      'callback' => '_devconnect_test_management_connection_ajax',
      'wrapper' => 'test-connect-result',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $form['connection_config_container']['connect_test']['test_connection_status'] = array(
    '#type' => 'item',
    '#prefix' => '<div id="test-connect-result">',
    '#suffix' => '</div>',
    '#markup' => '<br>' . $status,
  );

  return system_settings_form($form);
}

function devconnect_admin_form_submit($form, &$form_state) {
  $config = Drupal::config('devconnect.settings');
  foreach (array('org', 'endpoint', 'user', 'pass', 'log_threshold') as $key) {
    $value = $form_state['values'][$key];
    if ($key == 'pass') {
      $value = Apigee\Util\Crypto::encrypt($value);
    }
    $config->set($key, $value);
  }
  $config->save();
}

function devconnect_password_post_render($content, $element) {
  return str_replace('type="text"', 'type="password"', $content);
}

function devconnect_number_post_render($content, $element) {
  return str_replace('type="text"', 'type="number" style="width:3em !important"', $content);
}

/**
 * Ajax Callback for Testing the KMS Connection
 */
function _devconnect_test_management_connection_ajax($form, &$form_state) {
  return $form['connection_config_container']['connect_test']['test_connection_status'];
}

/**
 * Submit Callback for testing the KMS Connection
 */
function _devconnect_test_management_connection_submit($form, &$form_state) {
  // provide the currently user supplied credentials
  $org = $form_state['input']['org'];
  $endpoint = $form_state['input']['endpoint'];
  $user = $form_state['input']['user'];
  $pass = $form_state['input']['pass'];
  $timeout = $form_state['input']['connection_timeout'];

  // make the form states rebuild and store important variables
  $form_state['rebuild'] = TRUE;
  $form_state['storage']['ajaxed'] = TRUE;
  $form_state['storage']['connection_status'] = _devconnect_test_kms_connection($org, $endpoint, $user, $pass, $timeout);
}

/**
 * Test connection with the Management server
 *
 * @param string $org - Organization that user has supplied
 * @param string $endpoint - Endpoint that user has supplied
 * @param string $user - Username that the user has supplied
 * @param string $pass - Password (unencrypted) that the user has supplied
 * @param int $timeout - Number of seconds until connection timeout, or zero for infinite
 * @return string
 */
function _devconnect_test_kms_connection($org, $endpoint, $user, $pass, $timeout = 4) {
  if (!valid_url($endpoint)) {
    return '<span style="color:red">' . t('Invalid endpoint') . '</span>';
  }
  // Make sure timeout does not exceed 8 seconds, or failure ensues.
  $timeout = intval(min($timeout, 8));
  // Zero timeout is infinite; big problem.
  if ($timeout < 1) {
    $timeout = 4;
  }

  $options = array(
    'http_options' => array(
      'connection_timeout' => $timeout
    )
  );

  $config = new Apigee\Util\OrgConfig($org, $endpoint, $user, $pass, $options);
  $org = new Apigee\ManagementAPI\Organization($config);

  try {
    $org->load();
    return '<span style="color:green">' . t('Connection Successful') . '</span>';
  }
  catch (Exception $e) {
    return '<span style="color:red">' . t('Connection Unsuccessful: ' . $e->getCode()) . '</span>';
  }
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function devconnect_permission() {
  return array(
    'administer organization settings' => array(
      'title' => 'Administer organization settings',
      'restrict access' => TRUE,
    ),
    'view devconnect errors' => array(
      'title' => 'View DevConnect error detail',
      'restrict access' => TRUE
    )
  );
}

/**
 * Implements hook_cron.
 */
function devconnect_cron() {
  // query & store environments
  $dev_app = new Apigee\ManagementAPI\DeveloperAppAnalytics(devconnect_default_api_client());

  $environments = $dev_app->queryEnvironments();
  variable_set('devconnect_org_environments', $environments);
}


/**
 * Format callback for the devconnect_curlauth variable.
 *
 * @see devconnect_variable_info
 *
 * @param $variable
 * @param $options
 * @return string
 */
function devconnect_format_endpoint_auth($variable, $options) {
  list($username) = explode(':', $variable['value']);
  return $username . ':[encrypted]';
}


/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function devconnect_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login') {
    $form['userpasswordlink'] = array(
      '#markup' => '<br/>' . l('Forgot your password?', 'user/password') . '<br/><br/>',
      '#weight' => 100
    );
  }
}

/**
 * Implements hook_theme().
 *
 * @return array
 */
function devconnect_theme() {
  $items = array();
  $tpl_path = drupal_get_path('module', 'devconnect') . '/templates';
  $items['devconnect_error_inline'] = array(
    'path' => $tpl_path,
    'template' => 'devconnect_error_inline',
    'variables' => array('summary' => NULL, 'detail' => NULL),
  );
  $items['devconnect_error_message'] = array(
    'path' => $tpl_path,
    'template' => 'devconnect_error_message',
    'variables' => array('summary' => NULL, 'detail' => NULL, 'severity' => 'error'),
  );
  return $items;
}

/**
 * Returns a wrapper around org connection settings.
 *
 * The name of this function doesn't really make sense, but it is preserved
 * for the sake of backwards compatibility.
 *
 * @return Apigee\Util\OrgConfig
 */
function devconnect_default_api_client() {
  // make drush site-install happy
  devconnect_boot();
  // When running update.php, we might reach this code before we get to the
  // code that enables the d8cmi module. In that case, manually force the
  // module to load.
  if (!module_exists('d8cmi')) {
    module_load_include('module', 'd8cmi');
  }
  d8cmi_init();

  $config = Drupal::config('devconnect.settings');
  $org = $config->get('org');
  $endpoint = $config->get('endpoint');
  $username = $config->get('user');
  $pass_encrypted = $config->get('pass');
  $log_threshold = $config->get('log_threshold');
  $password = Apigee\Util\Crypto::decrypt($pass_encrypted);

  $logger = new Apigee\Drupal\WatchdogLogger();
  $logger::setLogThreshold($log_threshold);
  $user_mail = user_is_logged_in() ? $GLOBALS['user']->mail : NULL;

  $options = array(
    'logger' => $logger,
    'user_mail' => $user_mail,
    'http_options' => array(
      'connection_timeout' => intval($config->get('connection_timeout')),
      'timeout' => intval($config->get('request_timeout'))
    )
  );

  return new Apigee\Util\OrgConfig($org, $endpoint, $username, $password, $options);
}

/**
 * Logs use of deprecated classes and functions (from pre-R21 days)
 * so that we can bring CS code up to current standards.
 */
function _devconnect_warn_deprecated() {
  if (version_compare(PHP_VERSION, '5.4', '>=')) {
    // Be more efficient when running PHP 5.4
    $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 2);
  }
  else {
    // Sigh. Pull entire backtrace.
    $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
  }
  $frame = $backtrace[1];

  if (isset($frame['class'])) {
    $subject = 'class ' . $frame['class'];
    $verb = 'instantiated';
  }
  else {
    $subject = 'function ' . $frame['function'];
    $verb = 'invoked';
  }
  $message = 'Deprecated %subject was %verb in file %file, line %line.';
  $args = array(
    '%subject' => $subject,
    '%verb' => $verb,
    '%file' => $frame['file'],
    '%line' => $frame['line']
  );
  devconnect_default_api_client()->logger->warning(t($message, $args), array('type' => 'devconnect'));
}

/**
 * Common error/notification handler for KMS faults.
 *
 * Invokes hook_devconnect_error_alter() to change how messages are displayed.
 *
 * @param int $error_code
 * @param string $summary
 * @param string $details
 * @param int $severity
 * @param int $display
 * @return bool|string
 */
function devconnect_notify($error_code, $summary, $details, $severity = Apigee\Util\ErrorHandling::SEVERITY_ERROR, $display = Apigee\Util\ErrorHandling::DISPLAY_MESSAGE) {
  drupal_alter('devconnect_error', $error_code, $summary, $details, $severity, $display);

  switch ($severity) {
    case Apigee\Util\ErrorHandling::SEVERITY_STATUS:
      $message_type = 'status';
      break;
    case Apigee\Util\ErrorHandling::SEVERITY_WARNING:
      $message_type = 'warning';
      break;
    default:
      $message_type = 'error';
      break;
  }
  if (!user_access('view devconnect errors')) {
    $details = NULL;
  }
  if ($display == Apigee\Util\ErrorHandling::DISPLAY_MESSAGE) {
    $formatted_message = theme('devconnect_error_message', array('summary' => $summary, 'detail' => $details));
    drupal_set_message($formatted_message, $message_type);
    return FALSE;
  }
  return theme('devconnect_error_inline', array('summary' => $summary, 'detail' => $details, 'severity' => $message_type));
}

function devconnect_get_debug_data() {
  return Apigee\Util\DebugData::toArray();
}
