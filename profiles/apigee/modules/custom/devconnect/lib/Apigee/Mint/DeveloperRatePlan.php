<?php
namespace Apigee\Mint;

use Apigee\Exceptions\NotImplementedException;
use \Apigee\Exceptions\ResponseException as ResponseException;
use \Apigee\Mint\Exceptions\MintApiException as MintApiException;
use \Apigee\Exceptions\ParameterException as ParameterException;
use \Apigee\Util\CacheFactory as CacheFactory;
use \Apigee\Util\Log as Log;

class DeveloperRatePlan extends Base\BaseObject {

  private $dev;

  /**
   * @var string
   * Format YYYY-MM-DD
   */
  private $start_date;

  /**
   * @var string
   * Format YYYY-MM-DD
   */
  private $end_date;

  /**
   * @var string
   */
  private $id;

  private $next_recurring_fee_date;

  /**
   * @var \Apigee\Mint\RatePlan
   */
  private $rate_plan;

  /**
   * @var string
   * Format YYYY-MM-DD
   */
  private $renewal_date;


  public function __construct($dev, \Apigee\Util\APIClient $client) {
    $this->init($client);
    $this->dev = $dev;

    $this->base_url = '/mint/organizations/' . rawurlencode($this->client->getOrg()) . '/developers/' . rawurlencode($dev) . '/developer-accepted-rateplans';
    $this->id_field = 'id';
    $this->id_is_autogenerated = TRUE;
    $this->wrapper_tag = 'developerRatePlan';

    $this->initValues();
  }

  public function getList($page_num = NULL, $page_size = 20) {
    $cache_manager = CacheFactory::getCacheManager(NULL);
    $data = $cache_manager->get('developer_accepted_rateplan:' . $this->dev, NULL);
    if (!isset($data)) {
      $this->client->get($this->base_url);
      $data = $this->getResponse();
      $cache_manager->set('developer_accepted_rateplan:' . $this->dev, $data);
    }
    $return_objects = array();
    foreach ($data[$this->wrapper_tag] as $response_data) {
      $obj = $this->instantiateNew();
      $obj->loadFromRawData($response_data);
      $return_objects[] = $obj;
    }
    return $return_objects;
  }

  /**
   * Implements Base\BaseObject::init_values().
   *
   * @return void
   */
  protected function initValues() {
    $this->start_date = NULL;
    $this->end_date = NULL;
    $this->id = NULL;
    $this->rate_plan = NULL;
  }

  /**
   * Implements Base\BaseObject::instantiate_new().
   *
   * @return DeveloperRatePlan
   */
  public function instantiateNew() {
    return new DeveloperRatePlan($this->dev, $this->client);
  }

  /**
   * Implements Base\BaseObject::load_from_raw_data().
   *
   * @param array $data
   * @param bool $reset
   */
  public function loadFromRawData($data, $reset = FALSE) {
    if ($reset) {
      $this->initValues();
    }
    $excluded_properties = array('ratePlan', 'developer');
    foreach (array_keys($data) as $property) {
      if (in_array($property, $excluded_properties)) {
        continue;
      }

      // form the setter method name to invoke setXxxx
      $setter_method = 'set' . ucfirst($property);

      if (method_exists($this, $setter_method)) {
        $this->$setter_method($data[$property]);
      }
      else {
        Log::write(__CLASS__, Log::LOGLEVEL_NOTICE, 'No setter method was found for property "' . $property . '"');
      }
    }

    if (isset($data['ratePlan']) && is_array($data['ratePlan']) && count($data['ratePlan']) > 0) {
      if (isset($data['ratePlan']['monetizationPackage']['id'])) {
        $m_package_id = $data['ratePlan']['monetizationPackage']['id'];
        $this->rate_plan = new RatePlan($m_package_id, $this->client);
        $this->rate_plan->loadFromRawData($data['ratePlan']);
      }
    }
  }

  public function force_save() {
    $url = '/mint/organizations/' . rawurlencode($this->client->getOrg()) . '/developers/' . rawurlencode($this->dev) . '/developer-rateplans';
    try {
      $obj = array(
          'developer' => array('id' => $this->dev),
          'startDate' => $this->start_date,
          'endDate' => $this->end_date,
          'ratePlan' => array('id' => $this->rate_plan->getId()),
          'suppressWarning' => TRUE
      );
      $this->client->post($url, json_encode($obj, TRUE));
    }
    catch(ResponseException $re) {
      if (MintApiException::isMintExceptionCode($re)) {
        throw new MintApiException($re);
      }
      throw $re;
    }
  }

  public function save($save_method = 'update') {
    $url = '/mint/organizations/' . rawurlencode($this->client->getOrg()) . '/developers/' . rawurlencode($this->dev) . '/developer-rateplans';
    try {
      if ($save_method == 'create') {
        $obj = array(
            'developer' => array('id' => $this->dev),
            'startDate' => $this->start_date,
            'endDate' => $this->end_date,
            'ratePlan' => array('id' => $this->rate_plan->getId()),
        );
        $this->client->post($url, json_encode($obj, TRUE));
      }
      elseif ($save_method == 'update') {
        $url .= '/' . $this->getId();
        $obj = array(
            'developer' => array('id' => $this->dev),
            'startDate' => $this->start_date,
            'endDate' => $this->end_date,
            'ratePlan' => array('id' => $this->rate_plan->getId()),
            'id' => $this->id,
        );
        $this->client->put($url, json_encode($obj, TRUE));
      }
      else {
        throw new ParameterException('Unsoported save method argumente: ' . $save_method);
      }
    }
    catch(ResponseException $re) {
      if (MintApiException::isMintExceptionCode($re)) {
        throw new MintApiException($re);
      }
      throw $re;
    }
  }

  public function delete() {
    $url = '/mint/organizations/' . rawurlencode($this->getClient()->getOrg()) . '/developers/' . rawurlencode($this->dev) . '/developer-rateplans/' . rawurlencode($this->id);
    $this->client->delete($url);
  }

  /**
   * Implements Base\BaseObject::__toString().
   *
   * @return string
   */
  public function __toString() {
    $obj = array(
      'developer' => array('id' => $this->dev),
      'endDate' => $this->end_date,
      'startDate' => $this->start_date,
      'id' => $this->id,
      'ratePlan' => NULL
    );
    if (isset($this->rate_plan)) {
      $obj['ratePlan'] = array('id' => $this->rate_plan->getId());
    }

    return json_encode($obj);
  }

  /* Accessors */

  public function getDeveloperId() {
    return $this->dev;
  }
  public function getStartDate() {
    return $this->start_date;
  }
  public function getEndDate() {
    return $this->end_date;
  }
  public function getId() {
    return $this->id;
  }
  public function getRatePlan() {
    return $this->rate_plan;
  }

  public function getRenewalDate() {
    return $this->renewal_date;
  }

  public function getNextRecurringFeeDate() {
    return $this->next_recurring_fee_date;
  }


  /* Setters */

  public function setStartDate($start_date) {
    $this->start_date = $start_date;
  }

  public function setEndDate($end_date) {
    $this->end_date = $end_date;
  }

  public function setId($id) {
    $this->id = $id;
  }

  public function setRatePlan($rate_plan) {
    $this->rate_plan = $rate_plan;
  }

  public function setRenewalDate($renewal_date) {
    $this->renewal_date = $renewal_date;
  }

  public function setNextRecurringFeeDate($next_recurring_fee_date) {
    $this->next_recurring_fee_date = $next_recurring_fee_date;
  }

  public function setDeveloperId($dev) {
    $this->dev = $dev;
  }
}