<?php

/**
 * @file
 * Enables monitor alerting for Apigee Monetization.
 */


/**
 * Implements hook_menu().
 */
function devconnect_monetization_monitor_menu() {
  $items = array();

  $items['admin/config/devconnect_monetization/monitor'] = array(
    'title' => 'Monetization monitor',
    'description' => 'Control behavior of the Monetization monitor module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_monetization_monitor_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'devconnect_monetization_monitor.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/devconnect_monetization/monitor/%/delete/%'] = array(
    'title' => 'Delete E-mail Address',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_monetization_monitor_admin_email_delete_form', 4, 6),
    'access arguments' => array('administer site configuration'),
    'file' => 'devconnect_monetization_monitor.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function devconnect_monetization_monitor_permission() {
  return array(
    'view error details' => array(
      'title' => t('View error details'),
      'description' => t('View extended error details when errors occur.'),
    ),
  );
}

/**
 * Implements hook_watchdog().
 */
function devconnect_monetization_monitor_watchdog(array $log_entry) {
  // If the log entry is not from monetization and is not severity
  // 'emergency', ignore.
  if(!($log_entry['type'] == 'devconnect_mint_payment' && $log_entry['severity'] == WATCHDOG_EMERGENCY)) {
    return;
  }

  // Send email only if there is an email address.
  // Otherwise the message is ignored by this module.
  $emails = devconnect_monetization_monitor_load_notification_emails();
  if (count($emails) < 1) {
    return;
  }

  $error_message = t("Monetization error details: " . $log_entry['message'], $log_entry['variables']);

  // If the user is an admin of the system, give them more information about the
  // error that occurred.
  if(user_access('view error details')) {
    drupal_set_message($error_message, 'error');
  }


  // Send emails
  // All system mails need to specify the module and template key (mirrored from
  // hook_mail()) that the message they want to send comes from.
  $module = 'devconnect_monetization_monitor';
  $key = 'error_monitoring';

  // Specify 'to' and 'from' addresses.
  $to = '';
  foreach($emails as $email) {
    $to = $email->email . ',';
  }
  $from = variable_get('site_mail', ini_get('sendmail_from'));

  $params = array(
    'log_entry' => $log_entry,
  );

  // The language of the e-mail. This will one of three values:
  // - user_preferred_language(): Used for sending mail to a particular website
  //   user, so that the mail appears in their preferred language.
  // - global $language: Used when sending a mail back to the user currently
  //   viewing the site. This will send it in the language they're currently
  //   using.
  // - language_default(): Used when sending mail to a pre-existing, 'neutral'
  //   address, such as the system e-mail address, or when you're unsure of the
  //   language preferences of the intended recipient.
  //
  // Since in our case, we are sending a message to a random e-mail address that
  // is not necessarily tied to a user account, we will use the site's default
  // language.
  $language = language_default();

  // Whether or not to automatically send the mail when drupal_mail() is
  // called. This defaults to TRUE, and is normally what you want unless you
  // need to do additional processing before drupal_mail_send() is called.
  $send = TRUE;
  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] != TRUE) {
    watchdog(t('There was a problem sending an email to the monetization monitor email list.'), 'error');
  }
}


/**
 * Implements hook_mail().
 *
 * This hook defines a list of possible e-mail templates that this module can
 * send. Each e-mail is given a unique identifier, or 'key'.
 *
 * $message comes in with some standard properties already set: 'to' address,
 * 'from' address, and a set of default 'headers' from drupal_mail(). The goal
 * of hook_mail() is to set the message's 'subject' and 'body' properties, as
 * well as make any adjustments to the headers that are necessary.
 *
 * The $params argument is an array which can hold any additional data required
 * to build the mail subject and body; for example, user-entered form data, or
 * some context information as to where the mail request came from.
 *
 * Note that hook_mail() is not actually a hook. It is only called for a single
 * module, the module named in the first argument of drupal_mail(). So it's
 * a callback of a type, but not a hook.
 */
function devconnect_monetization_monitor_mail($key, &$message, $params) {
  global $user;

  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    // Send a simple message from the contact form.
    case 'error_monitoring':
      $log_entry = $params['log_entry'];
      $site_name =  variable_get('site_name', "Default site name");
      $date = format_date($log_entry['timestamp'], 'short');
      $log_severity_levels = watchdog_severity_levels();

      $message['subject'] = t('Dev Portal Monetization Error Logged at @site-name, @date', array('@site-name' => $site_name, '@date' => $date), $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('Date @date', array('@date' => $date), $options);
      $message['body'][] = t('User:  @user_name @user_mail', array('@user_name' => $user->name, '@user_mail' => $user->mail), $options);
      $message['body'][] = t('Log request URI:  @url', array('@url' => $log_entry['request_uri']), $options);
      $message['body'][] = t('Referer:  @url', array('@url' => $log_entry['referer']), $options);
      $message['body'][] = t('Log Type:  @log_type', array('@log_type' => $log_entry['type']), $options);
      $message['body'][] = t('Log Severity: @log_severity', array('@log_severity' => $log_severity_levels[$log_entry['severity']]), $options);
      $message['body'][] = t('Log Message:', $options);
      $message['body'][] = t($log_entry['message'], $log_entry['variables'], $options);
      break;
  }
}

/**
 * Returns an array of email addresses to send notifications to.
 */
function devconnect_monetization_monitor_load_notification_emails($id=NULL) {
  if(isset($id)) {
    $result = db_query('SELECT id, email, created, lastupdate FROM {devconnect_monetization_monitor_email} em where em.id = :id', array(':id' => $id));
  }
  else {
    $result = db_query("SELECT id, email, created, lastupdate FROM {devconnect_monetization_monitor_email}");
  }
  return $result->fetchAllAssoc('id');
}

/**
 * Finds the specified e-mail and returns an object containing its data.
 * Returns false if e-mail cannot be found.
 *
 * @param string $email
 *
 * @return mixed
 */
function devconnect_monetization_monitor_find_address($email) {
  $email = strtolower($email);
  $query = db_select('devconnect_monetization_monitor_email', 'em');
  $query->addField('em', 'id');
  $query->condition('em.email', db_like($email), 'LIKE');
  $result = $query->execute();
  $id = $result->fetchField();

  if ($id) {
    return devconnect_monetization_monitor_load_notification_emails($id);
  }
  return FALSE;
}


/**
 * Adds an e-mail address to the notifications.
 */
function devconnect_monetization_monitor_register_email($email) {
  $email = strtolower($email);
  $query = db_insert('devconnect_monetization_monitor_email')
    ->fields(array('email', 'created'),
      array($email, REQUEST_TIME));

  $success = ($id = $query->execute());

  if ($success !== FALSE) {
    return $id;
  }
  else {
    return FALSE;
  }
}

/**
 * Adds an e-mail address to the notifications.
 */
function devconnect_monetization_monitor_remove_email($id) {
    db_delete('devconnect_monetization_monitor_email')
      ->condition('id', $id)
      ->execute();
}

/**
 * Implements hook_theme().
 */
function devconnect_monetization_monitor_theme() {
  return array(
    'devconnect_monetization_monitor_admin_settings_form' => array(
      'render element' => 'form',
      'file' => 'devconnect_monetization_monitor.admin.inc',
    ),
  );
}