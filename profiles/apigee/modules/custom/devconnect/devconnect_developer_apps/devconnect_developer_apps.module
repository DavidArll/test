<?php

module_load_include('php', 'devconnect_developer_apps', 'controllers/DeveloperAppController');
module_load_include('php', 'devconnect_developer_apps', 'controllers/ApiProductController');

module_load_include('php', 'devconnect_developer_apps', 'entities/ArrayEntity');
module_load_include('php', 'devconnect_developer_apps', 'entities/DeveloperAppEntity');
module_load_include('php', 'devconnect_developer_apps', 'entities/ApiProductEntity');

/**
 * Implements hook_menu().
 *
 * @return array
 */
function devconnect_developer_apps_menu() {
  $items = array();
  $items['user/%user/apps'] = array(
    'title' => t('My Apps'),
    'page callback' => 'devconnect_developer_apps_getlist',
    'page arguments' => array(1),
    'access callback' => 'devconnect_developer_apps_access',
    'access arguments' => array(1, 'view'),
    'menu_name' => 'main-menu',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );

  $items['user/%user/app-detail/%'] = array(
    'title' => t('App Detail'),
    'page callback' => 'devconnect_developer_apps_detail',
    'page arguments' => array(1, 3),
    'access callback' => 'devconnect_developer_apps_access',
    'access arguments' => array(1, 'view'),
    'type' => MENU_CALLBACK,
    'weight' => 0,
  );

  $items['user/%user/apps/add'] = array(
    'title' => t('Add New App'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_developer_apps_edit_form', 1),
    'access callback' => 'devconnect_developer_apps_access',
    'access arguments' => array(1, 'edit'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );

  $items['user/%user/apps/%/edit-app'] = array(
    'title' => t('Edit App'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_developer_apps_edit_form', 1, 3),
    'access callback' => 'devconnect_developer_apps_access',
    'access arguments' => array(1, 'create'),
    'type' => MENU_CALLBACK,
    'weight' => 0,
  );

  $items['user/%user/apps/%/delete'] = array(
    'title' => t('Delete App'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_developer_app_delete_form'),
    'access callback' => 'devconnect_developer_apps_access',
    'access arguments' => array(1, 'delete'),
    'type' => MENU_CALLBACK,
    'weight' => 0,
  );

  $items['user/%user/app-performance/%/%'] = array(
    'title' => t('Performance Data'),
    'page callback' => 'devconnect_developer_analytics_performance_download',
    'page arguments' => array(1, 3, 4),
    'file' => 'analytics.inc',
    'access callback' => 'devconnect_developer_apps_access',
    'access arguments' => array(1, 'view'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function devconnect_developer_apps_permission() {

  $actions = array(
    'view',
    'create',
    'edit',
    'delete',
    'administer'
  );
  $perms = array();
  foreach ($actions as $action) {
    $perms["$action developer apps"]['title'] = t(ucfirst($action) . " Developer Apps");
  }
  return $perms;
}

/**
 * Permission callback for viewing/creating/editing/deleting developer apps.
 *
 * @param $account
 * @return bool
 */
function devconnect_developer_apps_access($account, $permission) {
  return user_access('administer developer apps') || (user_is_logged_in() && $account->uid == $GLOBALS['user']->uid && user_access("$permission developer apps", $account));
}

/**
 * Implements hook_entity_info();
 *
 * @return array
 */
function devconnect_developer_apps_entity_info() {
  $info = array(
    'developer_app' => array(
      'label' => t('Developer App'),
      'controller class' => 'DeveloperAppController',
      'uri callback' => 'devconnect_developer_apps_entity_uri',
      'fieldable' => FALSE,
    ),
    'api_product' => array(
      'label' => t('API Product'),
      'controller class' => 'ApiProductController',
      'fieldable' => FALSE,
    )
  );
  return $info;
}

/**
 * Implements hook_entity_property_info().
 *
 * @return array
 */
function devconnect_developer_apps_entity_property_info() {
  // Make sure devconnect_boot has run. This is necessary in certain cases
  // when upgrading <= R23 sites to R24.
  devconnect_boot();
  // When running update.php, we might reach this code before we get to the
  // code that enables the d8cmi module. In that case, manually force the
  // module to load.
  if (!module_exists('d8cmi')) {
    module_load_include('module', 'd8cmi');
  }
  d8cmi_init();

  $raw_properties = Apigee\ManagementAPI\DeveloperApp::getAppProperties();
  $dev_app_properties = array();
  foreach ($raw_properties as $raw_property) {
    if ($raw_property == 'createdAt' || $raw_property == 'modifiedAt') {
      $type = 'date';
    }
    elseif (substr($raw_property, -1) == 's') {
      $type = 'list';
    }
    else {
      $type = 'text';
    }
    $dev_app_properties[$raw_property] = array(
      'label' => t(_devconnect_developer_apps_humanify_name($raw_property)),
      'type' => $type
    );
  }
  $dev_app_properties['uid'] = array(
    'label' => t('Drupal User ID'),
    'type' => 'integer'
  );

  $raw_properties = Apigee\ManagementAPI\APIProduct::getAPIProductProperties();
  $api_product_properties = array();
  foreach ($raw_properties as $raw_property) {
    if ($raw_property == 'createdAt' || $raw_property == 'modifiedAt') {
      $type = 'date';
    }
    elseif (substr($raw_property, -1) == 's') {
      $type = 'list';
    }
    else {
      $type = 'text';
    }
    $api_product_properties[$raw_property] = array(
      'label' => t(_devconnect_developer_apps_humanify_name($raw_property)),
      'type' => $type
    );
  }

  $info = array(
    'developer_app' => array('properties' => $dev_app_properties),
    'api_product' => array('properties' => $api_product_properties)
  );

  return $info;
}

/**
 * Implements hook_views_api().
 */
function devconnect_developer_apps_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'devconnect_developer_apps'),
  );
}

/**
 * Convenience function to turn camelCase name into Proper Case name.
 *
 * @param $name
 *
 * @return string
 */
function _devconnect_developer_apps_humanify_name($name) {

  // Special cases
  switch ($name) {
    case 'consumerKey':
      return 'API Key';
    case 'consumerSecret':
      return 'Secret';
  }

  $human_readable_name = '';
  for ($i = 0; $i < strlen($name); $i++) {
    $char = substr($name, $i, 1);
    if ($i == 0) {
      $char = strtoupper($char);
    }
    elseif ($char >= 'A' && $char <= 'Z') {
      $char = ' ' . $char;
    }
    $human_readable_name .= $char;
  }

  $callback = function ($matches) {
    return $matches[1] . strtoupper($matches[2]) . $matches[3];
  };

  // Capitalize API, ID, URL
  $human_readable_name = preg_replace_callback('!(^|\s)(Api|Id|Url)(\s|$)!', $callback, $human_readable_name);

  return $human_readable_name;
}

/**
 * URI callback for DeveloperApp entity.
 *
 * @param $dev_app
 * @return array
 */
function devconnect_developer_apps_entity_uri($dev_app) {
  if (user_is_logged_in() && $dev_app->uid == $GLOBALS['user']->uid && module_exists('me')) {
    $uid_arg = 'me';
  }
  else {
    $uid_arg = $dev_app->uid;
  }
  return array(
    'path' => 'users/' . $uid_arg . '/apps/' . rawurlencode($dev_app->name)
  );
}


/**
 * Implements hook_variable_info().
 *
 * @return array
 */
function devconnect_developer_apps_variable_info() {
  $variables['devconnect_show_analytics'] = array(
    'type' => 'boolean',
    'title' => t('Show Developer App performance tab?'),
    'default' => FALSE,
    'description' => t('When this value is enabled, the \'Performance\' tab will be displayed on the developer app detail page.'),
    'group' => 'devconnect'
  );

  $options = array('*' => 'All environments');
  try {
    $dca = new Apigee\ManagementAPI\DeveloperAppAnalytics(devconnect_default_api_client());
    $environments = $dca->getAllEnvironments();
    foreach($environments as $environment) {
      switch ($environment) {
        case 'prod': $env_name = 'Production'; break;
        case 'test': $env_name = 'Test'; break;
        case 'dev':  $env_name = 'Development'; break;
        default: $env_name = $environment;
      }
      $options[$environment] = t($env_name);
    }
  }
  catch (Apigee\Exceptions\ResponseException $e) {
    // Ignore this exception. It is probably the result of a misconfigured
    // endpoint.
    $environments = array();
  }
  if (array_key_exists('prod', $options)) {
    $default_env = 'prod';
  }
  elseif (count($environments) > 0) {
    $default_env = $environments[0];
  }
  else {
    $default_env = '*';
  }

  $variables['devconnect_analytics_environment'] = array(
    'type' => 'select',
    'title' => t('Environment to query for analytics data'),
    'default' => $default_env,
    'options' => $options,
    'group' => 'devconnect'
  );

  $variables['devconnect_show_apiproduct_status'] = array(
    'type' => 'boolean',
    'title' => t('Show API Product status on the developer app list?'),
    'default' => FALSE,
    'description' => t('When this value is enabled, the app\'s status with each associated API Product is listed on the app listing page.'),
    'group' => 'devconnect'
  );
  $variables['devconnect_validate_callback_url'] = array(
    'type' => 'textfield',
    'title' => t('Regex to Validate App Callback URL'),
    'default' => '',
    'description' => t('When not empty, Callback URL is validated against this Regex.'),
    'group' => 'devconnect',
  );
  $variables['devconnect_callback_handling'] = array(
    'type' => 'select',
    'title' => t('Callback URL handling'),
    'group' => 'devconnect',
    'options' => array(
      'require' => t('Callback URL is required for all developer apps.'),
      'optional' => t('Callback URL is optional for all developer apps.'),
      'none' => t('Callback URL is neither required nor displayed.')
    ),
    'default' => 'require',
    'required' => TRUE
  );
  $variables['devconnect_api_product_handling'] = array(
    'type' => 'select',
    'title' => t('API Product handling'),
    'default' => 'multiple_required',
    'group' => 'devconnect',
    'options' => array(
      'no_api_product' => t('Do not associate apps with any API Product.'),
      'default_api_product' => t('Associate all apps with the Default API Product (configured below).'),
      'single_unrequired' => t('Allow selection of a single API Product, but do not require it.'),
      'single_required' => t('Require selection of a single API Product.'),
      'multiple_unrequired' => t('Allow selection of multiple API Products, but do not require any.'),
      'multiple_required' => t('Allow selection of multiple API Products, and require at least one.')
    ),
    'required' => TRUE
  );

  $variables['devconnect_default_api_product'] = array(
    'type' => 'select',
    'title' => t('Default API Product'),
    'group' => 'devconnect',
    'options callback' => 'devconnect_developer_apps_list_apiproducts'
  );
  return $variables;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array $form
 */
function devconnect_developer_apps_form_devconnect_admin_form_alter(array &$form) {
  if (!is_array($form['#validate'])) {
    $form['#validate'] = array();
  }
  $form['#validate'][] = 'devconnect_developer_apps_admin_form_validate';
}

/**
 * Validator for devconnect_admin_form: makes sure Default APIProduct is
 * selected when handling selector requires it.
 *
 * @param $form
 * @param $form_state
 */
function devconnect_developer_apps_admin_form_validate(array $form, array &$form_state) {
  if ($form_state['values']['devconnect_api_product_handling'] == 'default_api_product' && empty($form_state['devconnect_default_api_product'])) {
    form_error($form['devconnect_default_api_product'], t('When associating all apps with a Default API Product, a Default API Product must be specified.'));
  }
}

/**
 * Callback to populate select box of API Products.
 *
 * @return array
 */
function devconnect_developer_apps_list_apiproducts() {
  $options = array('' => '[None]');
  $products = entity_load('api_product', FALSE, array('show_private' => TRUE));
  foreach ($products as $product) {
    $options[$product['name']] = $product['displayName'];
  }
  return $options;
}


/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 *
 * @return array
 */
function devconnect_developer_apps_theme($existing, $type, $theme, $path) {
  $items = array();
  $template_path = drupal_get_path('module', 'devconnect_developer_apps') . '/templates';


  $items['devconnect_developer_apps_list'] = array(
    'template' => 'devconnect_developer_apps_list',
    'arguments' => array('application_count' => 0, 'applications' => '', 'user' => NULL),
    'path' => $template_path
  );

  $items['devconnect_developer_credentials_list'] = array(
    'template' => 'devconnect_developer_credentials_list',
    'arguments' => array('credentials' => NULL),
    'path' => $template_path
  );

  // Deprecated.  Supported only for legacy clients.
  $items['devconnect_developer_app'] = array(
    'template' => 'devconnect_developer_app',
    'arguments' => array(
      'account' => NULL,
      'access_type' => NULL,
      'callback_url' => NULL,
      'name' => NULL,
      'status' => NULL,
      'app_attributes' => array(),
      'credentials' => array(),
      'analytics_chart' => FALSE
    ),
    'path' => $template_path
  );

  $items['developer_app_tabs'] = array(
    'arguments' => array('tab_links' => array()),
    'file' => 'devconnect_developer_apps.theme.inc'
  );

  $items['developer_app_panes'] = array(
    'arguments' => array('panes' => array()),
    'file' => 'devconnect_developer_apps.theme.inc'
  );

  return $items;
}

/**
 * Page callback for "My Apps"
 *
 * @param $user
 *
 * @return string
 * @throws Exception
 */
function devconnect_developer_apps_getlist($user) {
  $module_path = drupal_get_path('module', 'devconnect_developer_apps');
  $library_path = libraries_get_path('jquery.selectlist');
  drupal_add_js($library_path . '/scripts/jquery.selectlist.pack.js');
  drupal_add_css($library_path . '/css/selectlist.css');
  drupal_add_css("$module_path/devconnect_developer_apps.css");

  if (user_access('delete developer apps')) {
    $theme_path = base_path() . drupal_get_path('theme', 'apigee_devconnect');
    $options = array('type' => 'inline');
    drupal_add_css("span.delete{background-image:url($theme_path/images/cross-circle.png);}", $options);
  }

  drupal_add_js("$module_path/devconnect_developer_apps.js");

  $app_entities = entity_load('developer_app', FALSE, array('mail' => $user->mail));

  if (count($app_entities) == 0) {
    $parameters = array(
      'application_count' => 0,
      'applications' => array(),
      'user' => $user
    );
  }
  else {
    $rows = array();
    $api_products = FALSE;
    foreach ($app_entities as $entity) {
      if (count($entity->credentialApiProducts) > 0 && $api_products === FALSE) {
        $api_products = array();
        $api_product_entities = entity_load('api_product');
        foreach ($api_product_entities as $api_product_entity) {
          $api_products[$api_product_entity['name']] = $api_product_entity['displayName'];
        }
      }

      $app_name = rawurlencode($entity->name);
      $uid_arg = $user->uid;

      // credentialApiProducts is an array with keys of 'apiproduct' and 'status'.
      // Add displayName key as well.
      foreach ($entity->credentialApiProducts as $key => $product) {
        $entity->credentialApiProducts[$key]['displayName'] = (array_key_exists($product['apiproduct'], $api_products) ? $api_products[$product['apiproduct']] : $product['apiproduct']);
      }

      $row = array(
        'app_name' => $entity->name,
        'callback_url' => $entity->callbackUrl,
        'attributes' => _devconnect_developer_apps_get_attributes($entity->attributes),
        'createdAt' => floor($entity->createdAt / 1000),
        'credential' => array(
          'apiProducts' => $entity->credentialApiProducts,
          'consumerKey' => $entity->consumerKey,
          'consumerSecret' => $entity->consumerSecret,
          'scopes' => $entity->credentialScopes,
          'status' => $entity->credentialStatus
        ),
        'edit_url' => "user/$uid_arg/apps/$app_name/edit-app",
        'entity' => $entity,
      );
      if (user_access('delete developer apps', $user)) {
        $row['delete_url'] = "user/$uid_arg/apps/$app_name/delete";
      }
      $rows[] = $row;
    }
    $parameters = array(
      'application_count' => count($rows),
      'applications' => $rows,
      'user' => $user,
    );
  }
  // Invoke hook_devconnect_developer_app_list_alter() on this parm list.
  drupal_alter('devconnect_developer_app_list', $parameters);

  return theme('devconnect_developer_apps_list', $parameters);

}

/**
 * Form constructor for adding/editing apps. Built via a menu callback to drupal_get_form().
 *
 * Incoming URL: user/%user/apps/add
 *
 * @param $form
 * @param $form_state
 * @param $account
 * @param null|string $app_name
 *
 * @return array
 */
function devconnect_developer_apps_edit_form($form, &$form_state, $account, $app_name = NULL) {

  $entity = NULL;
  if (isset($app_name)) {
    $entities = entity_load('developer_app', FALSE, array('mail' => $account->mail, 'name' => $app_name));
    if (count($entities) == 0) {
      drupal_not_found();
      exit;
    }
    $entity = reset($entities);
  }
  // Set Title
  if (isset($app_name)) {
    $header_caption = t('Editing App “@app”', array('@app' => $app_name));
    //drupal_set_title($header_caption);
    $button_caption = t('Save App');
  }
  else {
    drupal_set_title(t('Add App'));
    $header_caption = t('App Add Form');
    $button_caption = t('Create App');
  }
  $middle_arg = $account->uid;
  if ($account->uid == $GLOBALS['user']->uid) {
    if (module_exists('me')) {
      $middle_arg = 'me';
    }
    $breadcrumb_caption = t('My Apps');
  }
  else {
    $breadcrumb_caption = t('@name’s Apps', array('@name' => $account->name));
  }
  // Build Breadcrumbs
  $breadcrumb = array();
  $breadcrumb[] = l('Home', '<front>');
  $breadcrumb[] = l($breadcrumb_caption, 'user/' . $middle_arg . '/apps');

  // Set Breadcrumbs
  drupal_set_breadcrumb($breadcrumb);

  $form = array();

  $form['header'] = array(
    '#type' => 'legend',
    '#title' => $header_caption,
  );

  if (isset($app_name)) {
    $form['existing_machine_name'] = array(
      '#type' => 'item',
      '#title' => t('App Name'),
      '#markup' => check_plain($app_name),
      '#id' => 'existing_machine_name'
    );
    $form['machine_name'] = array(
      '#type' => 'value',
      '#value' => $app_name
    );

  }
  else {
    $form['machine_name'] = array(
      '#title' => t('App Name'),
      '#type' => 'textfield',
      '#id' => 'new_machine_name',
      '#default_value' => '',
      '#required' => TRUE,
      '#size' => 145,
      '#attributes' => array(
        'pattern' => '^[^&]+$',
        'title' => t('The App Name may not contain ampersands')
      )
    );
  }
  // $form['access_type'] = array(
  //   '#title' => t('Access'),
  //   '#type' => 'select',
  //   '#id' => 'new_access_type',
  //   '#options' => array('none' => 'none', 'read' => 'read', 'write' => 'write', 'both' => 'both'),
  //   '#required' => TRUE,
  //   '#default_value' => (isset($app_details) ? $app_details['accessType'] : NULL),
  // );
  if (variable_get('devconnect_callback_handling', 'require') != 'none') {
    $form['callback_url'] = array(
      '#title' => t('Callback URL'),
      '#type' => 'textfield',
      '#id' => 'new_callback_url',
      '#default_value' => (isset($app_name) ? $entity->callbackUrl : ''),
      '#required' => (variable_get('devconnect_callback_handling', 'require') == 'require'),
      '#size' => 145,
    );
  }
  else {
    $form['callback_url'] = array(
      '#type' => 'value',
      '#value' => (isset($app_name) ? $entity->callbackUrl : ''),
    );
  }

  // Invoke hook_devconnect_app_attributes to see if a custom module has
  // defined custom attributes to appear in this form.
  $custom_attributes = module_invoke_all('devconnect_app_attributes');
  foreach ($custom_attributes as $machine_name => $attribute) {
    $name = $attribute['name'];
    $default_value = (array_key_exists('default', $attribute) ? $attribute['default'] : NULL);
    $description = (array_key_exists('description', $attribute) ? $attribute['description'] : NULL);
    $required = (array_key_exists('required', $attribute) ? (bool) $attribute['required'] : FALSE);
    $max_length = (array_key_exists('maxlength', $attribute) ? $attribute['maxlength'] : NULL);
    $pattern = (array_key_exists('pattern', $attribute) ? $attribute['pattern'] : NULL);
    $tooltip = (array_key_exists('tooltip', $attribute) ? $attribute['tooltip'] : NULL);
    $type = (array_key_exists('type', $attribute) ? $attribute['type'] : 'textfield');

    $form_field_name = 'attribute_' . $machine_name;

    if ($type == 'value') {
      $form[$form_field_name] = array('#type' => 'value', '#value' => $default_value);
    }
    else {
      if (isset($app_name)) {
        $default_value = (isset($entity->attributes[$machine_name]) ? $entity->attributes[$machine_name] : NULL);
      }
      $uses_options = FALSE;
      if (($type == 'select' || $type == 'radios' || $type == 'checkboxes') && array_key_exists('options', $attribute)) {
        $uses_options = TRUE;
        if ($type != 'checkboxes' && !isset($default_value) && $required) {
          $option_keys = array_keys($attribute['options']);
          $default_value = (count($option_keys) ? $option_keys[0] : NULL);
        }
      }
      if ($type == 'checkboxes') {
        $default_value = explode(',', $default_value);
      }

      $form[$form_field_name] = array(
        '#title' => t($name),
        '#type' => $type,
        '#default_value' => $default_value,
        '#required' => $required
      );
      if ($description) {
        $form[$form_field_name]['#description'] = t($description);
      }
      if ($max_length) {
        $form[$form_field_name]['#maxlength'] = $max_length;
      }
      if ($pattern) {
        $form[$form_field_name]['#attributes']['pattern'] = $pattern;
        $form[$form_field_name]['#element_validate'][] = 'devconnect_developer_apps_pattern_validate';
      }
      if ($tooltip) {
        $form[$form_field_name]['#attributes']['title'] = $tooltip;
      }
      if ($uses_options) {
        $form[$form_field_name]['#options'] = $attribute['options'];
      }
    }
  }

  $options = array();

  $api_products = entity_load('api_product');
  drupal_alter('apiproduct_list', $api_products);
  foreach ($api_products as $api_product) {
    $options['prod-' . $api_product['name']] = $api_product['displayName'];
  }

  $preexisting_api_products = array();
  $api_product_default = array();
  $client_key = NULL;

  if (isset($app_name)) {
    $has_credential_info = FALSE;
    $credential_fields = array(
      'credentialApiproducts',
      'consumerKey',
      'consumerSecret',
      'credentialScopes',
      'credentialStatus'
    );
    foreach ($credential_fields as $cf) {
      if (property_exists($entity, $cf) && !empty($entity->$cf)) {
        $has_credential_info = TRUE;
        break;
      }
    }
    if ($has_credential_info) {
      $client_key = $entity->consumerKey;
      foreach ($entity->credentialApiProducts as $api_product) {
        $api_product_default[] = 'prod-' . $api_product['apiproduct'];
        $preexisting_api_products[] = $api_product;
      }
      if (count($preexisting_api_products) > 0) {
        sort($preexisting_api_products);
      }
    }
  }

  $form['preexisting_api_products'] = array(
    '#type' => 'value',
    '#value' => $preexisting_api_products
  );
  $form['client_key'] = array(
    '#type' => 'value',
    '#value' => $client_key
  );

  $api_product_handling = variable_get('devconnect_api_product_handling', 'multiple_required');
  if ($api_product_handling == 'no_api_product') {
    $form['api_product'] = array(
      '#type' => 'value',
      '#value' => array()
    );
  }
  elseif ($api_product_handling == 'default_api_product') {
    $form['api_product'] = array(
      '#type' => 'value',
      '#value' => array()
    );

  }
  else {
    $multiple = (strpos($api_product_handling, 'multiple') !== FALSE);
    $required = (strpos($api_product_handling, 'unrequired') === FALSE);
    $default_var = variable_get('devconnect_default_api_product', NULL);
    if (empty($api_product_default) && !empty($default_var)) {
      $api_product_default[] = 'prod-' . $default_var;
    }

    $form['api_product'] = array(
      '#title' => t('Product'),
      '#type' => 'select',
      '#id' => 'api_product',
      '#options' => $options,
      '#default_value' => $api_product_default,
      '#multiple' => $multiple,
      '#required' => $required
    );

    // Add jQuery Select List Plugin
    if ($multiple && $path = libraries_get_path('jquery.selectlist')) {
      drupal_add_js($path . '/scripts/jquery.selectlist.pack.js');
      drupal_add_js(drupal_get_path('module', 'devconnect_developer_apps') . '/devconnect_developer_apps.js');
      drupal_add_css($path . '/css/selectlist.css');
      drupal_add_css(drupal_get_path('module', 'devconnect_developer_apps') . '/devconnect_developer_apps.css');

      $theme_path = base_path() . drupal_get_path('theme', 'apigee_devconnect');
      $options = array('type' => 'inline');
      drupal_add_css("span.delete{background-image:url($theme_path/images/cross-circle.png);}", $options);
    }
  }

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $account->uid,
  );
  $form['user'] = array(
    '#type' => 'value',
    '#value' => $account
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => $button_caption,
    '#weight' => 10,
    '#submit' => array('devconnect_developer_apps_edit_form_submit')
  );

  $form['#validate'] = array('devconnect_developer_apps_edit_form_validate');

  if (!isset($entity)) {
    $entity = entity_create('developer_app', array());
  }
  $form_state['storage']['entity'] = $entity;

  return $form;
}

/**
 * Validates (on server-side) any custom element that has a pattern defined.
 *
 * This is a belt-and-suspenders fallback for when HTML5 pattern validation is
 * not executed.
 *
 * @param array $element
 * @param array $form_state
 * @param array $form
 */
function devconnect_developer_apps_pattern_validate(array $element, array &$form_state, array $form) {
  $pattern = '!' . str_replace('!', '\\!', $element['#attributes']['pattern']) . '!';
  if (!preg_match($pattern, $element['#value'])) {
    form_error($element, t('The @title element does not conform to the indicated pattern.', array('@title' => $element['#title'])));
  }
}

/**
 * Validates machine name (on creation, not on update) to make sure that it is
 * not already in use for this developer/org.
 *
 * @param array $form
 * @param array $form_state
 */
function devconnect_developer_apps_edit_form_validate(array $form, array &$form_state) {

  $callback_regex = variable_get('devconnect_validate_callback_url', '');
  if (strlen($callback_regex)) {
    $matched = preg_match($callback_regex, $form_state['values']['callback_url']);
    if ($matched === 0) {
      form_error($form['callback_url'], 'Invalid Callback URL');
    }
    // Error validating Callback URL, regex might not be a valid patterns and needs immediate addressing.
    else {
      if ($matched === FALSE) {
        $detail = 'Could not validate Callback URL against Regular Expression: ' . $callback_regex . ' Error reported: ' . preg_last_error();
        devconnect_default_api_client()->logger->critical($detail);
      }
    }
  }

  if ($form['machine_name']['#type'] == 'value') {
    // No need to validate existing machine names.
    return;
  }
  $machine_name = strtolower($form_state['values']['machine_name']);
  if (strpos($machine_name, '&') !== FALSE) {
    form_error($form['machine_name'], t('The App Name may not contain ampersands.'));
    return;
  }

  $entities = entity_load('developer_app', FALSE, array(
    'mail' => $form['user']['#value']->mail,
    'name' => $machine_name
  ));

  if (!empty($entities)) {
    // Throw form back to user.
    form_error($form['machine_name'], t('The App Name “:machine_name” is already in use. Please select a different name.', array(':machine_name' => $machine_name)));
    devconnect_default_api_client()->logger->notice("App $machine_name already exists.");
  }
}

/**
 * Submit handler for the above form.
 *
 * @param array $form
 * @param array $form_state
 */
function devconnect_developer_apps_edit_form_submit(array $form, array &$form_state) {
  devconnect_developer_apps_hook('presave', $form_state);
  $values = $form_state['values'];
  $entity = $form_state['storage']['entity'];
  $user = $form['user']['#value'];

  // Special handling for checkboxes: turn them into comma-delimited strings
  foreach ($values as $name => $value) {
    if (substr($name, 0, 10) == 'attribute_' && $form[$name]['#type'] == 'checkboxes' && is_array($value)) {
      $values[$name] = join(',', $value);
    }
  }

  $action_taken = (!is_object($entity) || empty($entity->appId) ? 'Created' : 'Updated');

  if (isset($values['api_product'])) {
    $api_products = array();
    if (is_array($values['api_product'])) {
      foreach ($values['api_product'] as $key => $value) {
        if ($value) {
          $api_products[] = str_replace('prod-', '', $key);
        }
      }
    }
    else {
      $api_products[] = str_replace('prod-', '', $values['api_product']);
    }
  }
  else {
    $api_products = NULL;
  }
  $entity->apiProductCache = $values['preexisting_api_products'];
  $entity->callbackUrl = (isset($values['callback_url']) ? $values['callback_url'] : '');
  $entity->name = $values['machine_name'];
  $entity->consumerKey = $values['client_key'];
  $entity->developer = $user->mail;
  if (isset($api_products)) {
    $entity->apiProducts = $api_products;
  }

  foreach ($values as $key => $value) {
    if (substr($key, 0, 10) == 'attribute_') {
      $entity->attributes[substr($key, 10)] = $value;
    }
  }

  $middle_arg = (module_exists('me') && $user->uid == $GLOBALS['user']->uid ? 'me' : $user->uid);
  $saved = entity_save('developer_app', $entity);
  if (!$saved) {
    $e = DeveloperAppController::getLastException();
    $code = $e->getCode();

    // The following should never occur. Name clashes should have been handled in form validation above.
    // If we encounter a name clash here, log it as CRITICAL -- these items MUST be addressed.
    if ($code == 409) {
      $summary = t('The App Name “@app_name” is already being used.', array('@app_name' => $values['machine_name']));
      $detail = 'Duplicate app name "' . $values['machine_name'] . '" for user "' . $user->name . '"!'
        . "\n" . $e->getResponse();

      devconnect_default_api_client()->logger->critical($detail);
    }
    else {
      // Let some messages be handled by what comes back from server if message
      // is meaningful.
      $response = @json_decode($e->getResponse());
      $action = rtrim(strtolower($action_taken), 'd');
      $uri = $e->getUri();
      if ($response && $response->code == 'keymanagement.service.app_invalid_name') {
        $summary = $response->message;
      }
      else {
        $summary = t('There was an error trying to @action the application. Please try again later.', array('@action' => $action));
      }
      $message = 'Saving app @app_name for user @user_name failed with HTTP status of @status when accessing URI @uri. Details as follows: @params';
      $args = array(
        '@app_name' => $values['machine_name'],
        '@user_name' => $user->name,
        '@status' => $code,
        '@uri' => $uri,
        '@params' => print_r($e->getParams(), TRUE)
      );
      $detail = t($message, $args);
    }
    // Here we ignore the return value. Since this is a form_submit handler,
    // errors MUST be displayed as Messages, not inline.
    devconnect_notify($code, $summary, $detail);
    drupal_goto("user/$middle_arg/apps/add");
  }

  $summary = t('App @status!', array('@status' => $action_taken));
  $detail = NULL;
  devconnect_notify(Apigee\Util\ErrorHandling::CODE_APP_CREATED, $summary, $detail, Apigee\Util\ErrorHandling::SEVERITY_STATUS);

  $form_state['redirect'] = 'user/' . $middle_arg . '/apps';
  $form_state['storage']['entity'] =& $entity;

  $results = devconnect_get_debug_data();
  if (!array_key_exists('appId', $results['data']) || empty($results['data']['appId'])) {
    $results['data']['appId'] = DeveloperAppController::getLastAppId();
  }

  // Invoke hook_devconnect_developer_app_save on all implementing modules
  devconnect_developer_apps_hook('save', $form_state, $results);

  if (module_exists('rules')) {
    $event = ($action_taken == 'Updated' ? 'devconnect_developer_app_update' : 'devconnect_developer_app_create');
    rules_invoke_event($event, $entity);
  }

}

/**
 * Form constructor for deleting apps. This is called from a menu callback via drupal_get_form.
 *
 * Incoming URL takes the following form:
 * - user/%user/apps/%/delete
 *
 * @param array $form
 * @param array $form_state
 *
 * @return array
 */
function devconnect_developer_app_delete_form($form, &$form_state) {

  if (user_is_logged_in()) {
    if ($GLOBALS['user']->uid == arg(1)) {
      $user = $GLOBALS['user'];
      $uid_arg = (module_exists('me') ? 'me' : $user->uid);
    }
    else {
      $user = user_load(arg(1));
      $uid_arg = $user->uid;
    }
  }
  else {
    drupal_not_found();
    exit;
  }

  $entities = entity_load('developer_app', FALSE, array('mail' => $user->mail, 'name' => arg(3)));
  $entity_loaded = (!empty($entities));
  if (!$entity_loaded) {
    drupal_not_found();
    exit;
  }
  $entity = reset($entities);

  drupal_set_title(t('Are you sure?'));

  $form = array(
    '#type' => 'form',
    '#attributes' => array(
      'id' => 'devconnect_developer_application_delete',
    ),
  );
  $form['are_you_sure'] = array(
    '#markup' => t('Deleting the ‘@name’ app will also delete all of its data. This action cannot be undone.<br><br>', array('@name' => $entity->name)),
  );

  $form['application'] = array('#type' => 'value', '#value' => $entity->name);
  $form['uid'] = array('#type' => 'value', '#value' => $user->uid);

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete App'),
    '#weight' => 10,
    '#submit' => array('devconnect_developer_app_delete_form_submit'),
  );

  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'user/' . $uid_arg . '/apps', array('attributes' => array('class' => array('cancel-link btn')))),
    '#weight' => 11,
  );

  $form['#entity'] = $entity;

  return $form;
}

/**
 * Form submit handler for the above form.
 *
 * @param $form
 * @param $form_state
 */
function devconnect_developer_app_delete_form_submit(&$form, &$form_state) {
  $values = $form_state['values'];

  $uid_arg = $values['uid'];
  if (user_is_logged_in() && $uid_arg == $GLOBALS['user']->uid) {
    $values['user'] = $GLOBALS['user'];
    if (module_exists('me')) {
      $uid_arg = 'me';
    }
  }
  else {
    $values['user'] = user_load($uid_arg);
  }

  // Invoke hook_devconnect_developer_app_predelete on all implementing modules.
  devconnect_developer_apps_hook('predelete', $form_state);
  entity_delete('developer_app', $form['#entity']->appId);
  $result = devconnect_get_debug_data();
  if ($result['code_class'] == 2) {
    drupal_set_message(t('App Deleted!'), 'status');
    if (module_exists('rules')) {
      rules_invoke_event('devconnect_developer_app_delete', $form['#entity']);
    }
  }
  else {
    $code = Apigee\Util\ErrorHandling::CODE_APP_CANNOT_BE_DELETED;
    $summary = t('App could not be deleted.');
    $detail = print_r($result, TRUE);

    devconnect_notify($code, $summary, $detail);
    devconnect_default_api_client()->logger->error($detail);
  }

  $form_state['redirect'] = "user/$uid_arg/apps";
  if ($result['code_class'] == 2) {
    // Invoke hook_devconnect_developer_app_delete on all implementing modules.
    devconnect_developer_apps_hook('delete', $form_state, $result);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * @param array $data
 * @param $router_item
 * @param $root_path
 */
function devconnect_developer_apps_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (arg(0) == 'user') {
    unset($data['tabs']);
  }
}

/**
 * Page callback to display detailed info for a user's app.
 *
 * @param $user
 * @param $app_name
 * @return string
 */
function devconnect_developer_apps_detail($user, $app_name) {
  $entities = entity_load('developer_app', FALSE, array('mail' => $user->mail, 'name' => $app_name));
  $entity = reset($entities);
  if (empty($entity)) {
    drupal_not_found();
    exit;
  }
  return _devconnect_developer_apps_detail($entity, $user);
}

function _devconnect_developer_apps_detail($entity, $user, $page = TRUE) {
  $breadcrumb = array();
  if ($page) {
    // Build Breadcrumbs
    $middle_arg = $user->uid;
    if ($user->uid == $GLOBALS['user']->uid) {
      if (module_exists('me')) {
        $middle_arg = 'me';
      }
      $breadcrumb_caption = t('My Apps');
    }
    else {
      $breadcrumb_caption = t('@name’s Apps', array('@name' => $user->name));
    }
    $breadcrumb[] = l(t('Home'), '<front>');
    $breadcrumb[] = l($breadcrumb_caption, 'user/' . $middle_arg . '/apps');
  }

  $description = $entity->description;
  if (!empty($description)) {
    devconnect_developer_apps_set_description($description);
  }
  $app_name = $entity->name;

  $access_type = $entity->accessType;
  $raw_result = $entity->debugData;

  $info = array(
    'account' => $user,
    'access_type' => ($access_type == 'both' ? 'read/write' : $access_type),
    'callback_url' => $entity->callbackUrl,
    'name' => $entity->name,
    'status' => $entity->status,
    'attributes' => array(),
    'credentials' => array(),
    'page_title' => $entity->name,
    'breadcrumb' => $breadcrumb,
    'raw_data' => $raw_result['data'],
    'analytics_chart' => FALSE
  );

  $cred = array('apiproducts' => array());
  foreach ($entity->credentialApiProducts as $api_product) {
    $product_entities = entity_load('api_product', array($api_product['apiproduct']));
    if (!empty($product_entities)) {
      $product_entity = reset($product_entities);
      $cred['apiproducts'][] = array(
        'display_name' => $product_entity['displayName'],
        'description' => $product_entity['description'],
        'status' => $api_product['status'],
        'name' => $api_product['apiproduct']
      );
    }
  }
  $cred['consumer_key'] = $entity->consumerKey;
  $cred['consumer_secret'] = $entity->consumerSecret;
  $cred['status'] = $entity->credentialStatus;
  $cred['scopes'] = $entity->credentialScopes;
  $info['credentials'][] = $cred;
  $info['overallStatus'] = $entity->overallStatus;

  $info['app_attributes'] = _devconnect_developer_apps_get_attributes($entity->attributes);
  $show_analytics = devconnect_developer_apps_show_analytics($cred);
  if (devconnect_developer_apps_show_analytics($cred)) {
    module_load_include('inc', 'devconnect_developer_apps', 'analytics');
    $info['analytics_chart'] = devconnect_developer_apps_analytics_performance($user, $app_name);
  }

  // Invoke hook_devconnect_developer_app_alter on this info
  drupal_alter('devconnect_developer_app', $info);

  drupal_add_css(drupal_get_path('module', 'devconnect_developer_apps') . '/devconnect_developer_apps.css');

  if ($page) {
    // Set Title
    drupal_set_title(t($info['page_title']));
    // Set Breadcrumbs
    drupal_set_breadcrumb($info['breadcrumb']);
  }

  // Allow legacy customer installs to do this old-style.
  if (_devconnect_developer_apps_template_is_overridden('devconnect_developer_app')) {
    return theme('devconnect_developer_app', $info);
  }

  $uid_arg = (module_exists('me') && $GLOBALS['user']->uid == $info['account']->uid ? 'me' : $info['account']->uid);
  $show_api_products = (!empty($info['credentials']) && !empty($info['credentials'][0]['apiproducts']) && variable_get('devconnect_api_product_handling', 'multiple_required') != 'no_api_product');

  $tabs = array(
    array('text' => t('Keys'), 'path' => '#keys')
  );
  if ($show_api_products) {
    $tabs[] = array('text' => t('Products'), 'path' => '#products');
  }
  $tabs[] = array('text' => t('App Details'), 'path' => '#details');
  $tabs[] = array('text' => t('Edit App'), 'path' => 'user/' . $uid_arg . '/apps/' . $info['name'] . '/edit-app');
  if ($show_analytics) {
    $tabs[] = array('text' => t('App Performance'), 'path' => '#performance');
  }

  module_load_include('inc', 'devconnect_developer_apps', 'devconnect_developer_apps.theme');
  $panes = array(
    devconnect_developer_apps_keys_pane($info)
  );
  if ($show_api_products) {
    $panes[] = devconnect_developer_apps_products_pane($info);
  }
  $panes[] = devconnect_developer_apps_detail_pane($info);
  if ($show_analytics) {
    $panes[] = devconnect_developer_apps_performance_pane($info);
  }

  drupal_alter('devconnect_developer_app_details', $tabs, $panes);

  return theme('developer_app_tabs', array('tab_links' => $tabs))
  . theme('developer_app_panes', array('panes' => $panes));
}

/**
 * Helper function to get displayable attributes.
 *
 * @param $app_attributes
 * @return array
 */
function _devconnect_developer_apps_get_attributes($app_attributes) {
  // Invoke custom hook
  $shown_attributes = module_invoke_all('devconnect_attributes_display_list');
  $items = array();
  foreach ($shown_attributes as $attr_name => $attr_display) {
    foreach ($app_attributes as $result_attr_name => $result_attr_value) {
      if ($result_attr_name == $attr_name) {
        $items[$attr_display] = $result_attr_value;
      }
    }
  }
  return $items;
}

/**
 * Preprocessor for theme('page').
 *
 * @param $variables
 * @return void
 */
function devconnect_developer_apps_preprocess_page(&$variables) {
  $description = devconnect_developer_apps_set_description();
  if (isset($description)) {
    $variables['subtitle'] = $description;
  }
}

/**
 * Static getter/setter for app description
 *
 * @param string|null $description
 * @return string|null
 */
function devconnect_developer_apps_set_description($description = NULL) {
  static $desc;
  if (isset($description)) {
    $desc = $description;
  }
  return $desc;
}

/**
 * Helper function to determine if the Performance tab should be shown.
 *
 * @param $credential
 * @return bool
 */
function devconnect_developer_apps_show_analytics() {
  return variable_get('devconnect_show_analytics', FALSE);
}

/**
 * Helper function to determine if selection of an API Product is required while creating an App.
 *
 * @return bool
 */
function devconnect_developer_apps_is_api_product_required() {
  return variable_get('devconnect_api_product_requirement', FALSE);
}

/**
 * Invokes a devconnect-related hook.
 *
 * @param string $hook
 * @param array $values
 * @param null|array $kms_result
 */
function devconnect_developer_apps_hook($hook, &$values, $kms_result = NULL) {
  $hook = 'devconnect_developer_app_' . $hook;

  // Cannot use module_invoke_all because $values must be passed by reference.
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    if (isset($kms_result)) {
      // Note that for backwards compatibility, $kms_result must be first arg
      $function($kms_result, $values);
    }
    else {
      $function($values);
    }
  }
}

/**
 * Takes $form_state['values'] and populates a DeveloperApp object with the
 * contents.
 *
 * @param array $form_values
 * @param Apigee\ManagementAPI\DeveloperApp $app
 */
function _devconnect_developer_apps_populate_from_form_values(array $form_values, Apigee\ManagementAPI\DeveloperApp &$app) {

  if (isset($form_values['api_product'])) {
    $api_products = array();
    if (is_array($form_values['api_product'])) {
      foreach ($form_values['api_product'] as $key => $value) {
        if ($value) {
          $api_products[] = str_replace('prod-', '', $key);
        }
      }
    }
    else {
      // Allow customized sites to declare api_product as non-multiple.
      // This results in a scalar value rather than an array.
      $api_products[] = str_replace('prod-', '', $form_values['api_product']);
    }
  }
  else {
    $api_products = NULL;
  }
  $app->setApiProductCache($form_values['preexisting_api_products']);
  $app->setCallbackUrl(isset($form_values['callback_url']) ? $form_values['callback_url'] : '');
  $app->setName($form_values['machine_name']);
  $app->setConsumerKey($form_values['client_key']);
  if (isset($api_products)) {
    $app->setApiProducts($api_products);
  }

  foreach ($form_values as $key => $value) {
    if (substr($key, 0, 10) == 'attribute_') {
      $app->setAttribute(substr($key, 10), $value);
    }
  }
}

/**
 * Helper function to determine if a given template name is overridden in the
 * theme.
 *
 * @param $template_name
 * @return bool
 */
function _devconnect_developer_apps_template_is_overridden($template_name) {
  $my_path = drupal_get_path('module', 'devconnect_developer_apps');
  $registry = theme_get_registry();
  if (!isset($registry[$template_name]) || !isset($registry[$template_name]['theme path'])) {
    return FALSE;
  }
  return ($registry[$template_name]['theme path'] != $my_path);
}

/**
 * Entity callback to view in full mode.
 *
 * @param stdClass $entity
 * @param bool $page
 * @return string
 */
function devconnect_developer_apps_view_full($entity, $page = TRUE) {
  $uid = $entity->uid;
  if (user_is_logged_in() && $GLOBALS['user']->uid == $uid) {
    $user = $GLOBALS['user'];
  }
  else {
    $user = user_load($uid);
  }
  return _devconnect_developer_apps_detail($entity, $user, $page);
}


/**
 * Implements hook_tokens().
 *
 * @param string $type
 * @param array $tokens
 * @param array $data
 * @param array $options
 *
 * @return array
 */
function devconnect_developer_apps_tokens($type, array $tokens, array $data = array(), array $options = array()) {
  if ($type != 'developer_app' || empty($data['developer_app'])) {
    return array();
  }
  $url_options = array('absolute' => TRUE);
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }
  $sanitize = !empty($options['sanitize']);
  $app = $data['developer_app'];
  $replacements = array();
  foreach ($tokens as $name => $original) {
    switch ($name) {
      case 'appUrl':
        $replacements[$original] = url('user/' . $app['uid'] . '/apps/' . $app['name'], $url_options);
        break;
      // Timestamps
      case 'createdAt':
      case 'modifiedAt':
        $replacements[$original] = format_date(floor($app[$name] / 1000), 'medium', '', NULL, $language_code);;
        break;
      // Arrays of strings
      case 'apiProducts':
        $replacements[$original] = $sanitize ? check_plain(join(', ', $app[$name])) : join(', ', $app[$name]);
        break;
      default:
        $replacements[$original] = $sanitize ? check_plain($app[$name]) : $app[$name];
        break;
    }
  }

  return $replacements;
}

/**
 * Implements hook_token_info().
 *
 * @return array
 */
function devconnect_developer_apps_token_info() {
  $type = array(
    'name' => t('Developer Apps'),
    'description' => t('Tokens related to developer apps'),
    'needs-data' => 'developer_app'
  );
  /*
  $app['accessType'] = array(
    'name' => t('Access Type'),
    'description' => t('Tells whether the app reads API data, writes it, or both.')
  );
  */
  $app['apiProducts'] = array(
    'name' => t('API Products'),
    'description' => t('List of all API Products used by the app.')
  );
  /*
  $app['appFamily'] = array(
    'name' => t('App Family'),
    'description' => t('Describes the app family, if any.')
  );
  $app['appId'] = array(
    'name' => t('App ID'),
    'description' => t('Unique UUID of this app.')
  );
  */
  $app['attributes'] = array(
    'name' => t('Attributes'),
    'description' => t('List of custom attributes for this app.')
  );
  $app['callbackUrl'] = array(
    'name' => t('Callback URL'),
    'description' => t('Callback URL configured for this app.')
  );
  $app['createdAt'] = array(
    'name' => t('Created At'),
    'description' => t('Timestamp at which the app was created.')
  );
  /*
  $app['createdBy'] = array(
    'name' => t('Created By'),
    'description' => t('Email of the user that created this app. NOTE: This is not the owning developer, but rather the administrative user configured for the Dev Portal.')
  );
  */
  $app['modifiedAt'] = array(
    'name' => t('Modified At'),
    'description' => t('Timestamp at which the app was last modified.')
  );
  /*
  $app['modifiedBy'] = array(
    'name' => t('Modified By'),
    'description' => t('Email of the user that last modified this app. NOTE: This is not the owning developer, but rather the administrative user configured for the Dev Portal.')
  );
  */
  /*
  $app['developerId'] = array(
    'name' => t('Developer ID'),
    'description' => t('Unique ID of the developer who owns this app.')
  );
  */
  $app['name'] = array(
    'name' => t('App Name'),
    'description' => t('The machine-readable name of the app.')
  );
  /*
  $app['scopes'] = array(
    // TODO fill this in
  );
  */
  $app['status'] = array(
    'name' => t('App Status'),
    'description' => t('The active status of this app.')
  );
  $app['description'] = array(
    'name' => t('Description'),
    'description' => t('Description of the app, if present.')
  );
  /*
  $app['credentialApiProducts'] = array(
    'name' => t('API Products for the Credential'),
    'description' => t('List of API Product names configured for the authentication credentials.')
  );
  */
  $app['consumerKey'] = array(
    'name' => t('Consumer Key'),
    'description' => t('The Consumer Key (public key or API Key) for this app.')
  );
  $app['consumerSecret'] = array(
    'name' => t('Consumer Secret'),
    'description' => t('The Consumer Secret (private key) for this app.')
  );
  /*
  $app['credentialScopes'] = array(
    // TODO fill this in
  );
  */
  $app['credentialStatus'] = array(
    'name' => t('Credential Status'),
    'description' => t('Status of the Consumer Key/Secret credential.')
  );
  $app['credentialAttributes'] = array(
    'name' => t('Credential Attributes'),
    'description' => t('Custom attributes of the Consumer Key/Secret credential.')
  );
  $app['developer'] = array(
    'name' => t('Developer Email'),
    'description' => t('Email address of the app’s developer.')
  );

  $app['appUrl'] = array(
    'name' => t('App URL'),
    'description' => t('URL on this site where the app’s details may be viewed.')
  );

  return array(
    'types' => array('developer_app' => $type),
    'tokens' => array('developer_app' => $app),
  );
}
