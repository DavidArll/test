<?php

/**
 * Implements hook_init().
 */
function smartdocs_init() {
  module_load_include('inc', 'smartdocs', 'admin/smartdocs.methods');
  module_load_include('inc', 'smartdocs', 'admin/smartdocs.models');
  module_load_include('inc', 'smartdocs', 'admin/smartdocs.resources');
  module_load_include('inc', 'smartdocs', 'admin/smartdocs.revisions');
  module_load_include('inc', 'smartdocs', 'smartdocs.theme');
}

/**
 * Implements hook_menu().
 */
function smartdocs_menu() {
  $items = array();
  $items['admin/smartdocs'] = array(
    'title' => t('SmartDocs'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_models'),
    'access arguments' => array('administer smartdocs content'),
    'file' => 'admin/smartdocs.models.inc',
    'weight' => -100,
  );
  $items['admin/smartdocs/settings'] = array(
    'title' => t('Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_settings'),
    'access arguments' => array('administer smartdocs content'),
    'weight' => 100,
  );
  $items['admin/smartdocs/models'] = array(
    'title' => t('Models'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_models'),
    'access arguments' => array('administer smartdocs content'),
    'file' => 'admin/smartdocs.models.inc',
  );
  $items['admin/smartdocs/models/add'] = array(
    'title' => t('Add Model'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartdocs_add_model'),
    'access arguments' => array('administer smartdocs content'),
    'file' => 'admin/smartdocs.models.inc',
    'weight' => -100,
  );
  $models = entity_load('smartdocs_model');
  foreach ($models as $model) {
    $rows[$model['displayName']] = $model;
  }
  ksort($rows);
  foreach ($rows as $model) {
    $items['admin/smartdocs/models/' . $model['name']] = array(
      'title' => $model['displayName'],
      'page callback' => 'drupal_get_form',
      'page arguments' => array('smartdocs_model_detail', 3),
      'access arguments' => array('administer smartdocs content'),
      'file' => 'admin/smartdocs.models.inc',
      'weight' => 94,
    );
    $items['admin/smartdocs/models/' . $model['name'] . '/import'] = array(
      'title' => t('Import'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('smartdocs_import_model', 3),
      'access arguments' => array('administer smartdocs content'),
      'file' => 'admin/smartdocs.models.inc',
      'weight' => 95,
    );
    $items['admin/smartdocs/models/' . $model['name'] . '/revisions'] = array(
      'title' => t('API Revisions'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('smartdocs_revision_detail', 3),
      'access arguments' => array('administer smartdocs content'),
      'file' => 'admin/smartdocs.revisions.inc',
      'weight' => 96,
    );
    $items['admin/smartdocs/models/' . $model['name'] . '/add'] = array(
      'title' => t('Add API Revision'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('smartdocs_add_revision', 3),
      'access arguments' => array('administer smartdocs content'),
      'file' => 'admin/smartdocs.revisions.inc',
      'weight' => 97,
    );
    $items['admin/smartdocs/models/' . $model['name'] . '/export'] = array(
      'title' => t('Export'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('smartdocs_model_export', 3),
      'access arguments' => array('administer smartdocs content'),
      'file' => 'admin/smartdocs.models.inc',
      'weight' => 98,
    );
    $items['admin/smartdocs/models/' . $model['name'] . '/export/%'] = array(
      'title' => t('Export'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('smartdocs_model_export', 3, 5),
      'access arguments' => array('administer smartdocs content'),
      'file' => 'admin/smartdocs.models.inc',
    );
    $items['admin/smartdocs/models/' . $model['name'] . '/settings'] = array(
      'title' => t('Settings'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('smartdocs_model_settings', 3),
      'access arguments' => array('administer smartdocs content'),
      'file' => 'admin/smartdocs.models.inc',
      'weight' => 99,
    );
    $items['admin/smartdocs/models/' . $model['name'] . '/revisions/%'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('smartdocs_resource_detail', 3, 5),
      'access arguments' => array('administer smartdocs content'),
      'file' => 'admin/smartdocs.resources.inc',
    );
    $items['admin/smartdocs/models/' . $model['name'] . '/resource/add/%'] = array(
      'title' => t('Add Resource'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('smartdocs_resource_add', 3, 6),
      'access arguments' => array('administer smartdocs content'),
      'file' => 'admin/smartdocs.resources.inc',
    );
    $items['admin/smartdocs/models/' . $model['name'] . '/resource/edit/%/%'] = array(
      'title' => t('Add Resource'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('smartdocs_resource_edit', 3, 6, 7),
      'access arguments' => array('administer smartdocs content'),
      'file' => 'admin/smartdocs.resources.inc',
    );
    $items['admin/smartdocs/models/' . $model['name'] . '/method/add/%/%'] = array(
      'title' => t('Add Method'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('smartdocs_method_add', 3, 6, 7),
      'access arguments' => array('administer smartdocs content'),
      'file' => 'admin/smartdocs.methods.inc',
    );
    $items['admin/smartdocs/models/' . $model['name'] . '/revisions/%/auth'] = array(
      'title' => t('Authentication Settings'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('smartdocs_revision_auth', 3, 5),
      'access arguments' => array('administer smartdocs content'),
      'file' => 'admin/smartdocs.revisions.inc',
    );
    $items['admin/smartdocs/models/' . $model['name'] . '/revisions/%/edit'] = array(
      'title' => t('Edit Revision'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('smartdocs_edit_revision', 3, 5),
      'access arguments' => array('administer smartdocs content'),
      'file' => 'admin/smartdocs.revisions.inc',
    );
    $items['admin/smartdocs/models/' . $model['name'] . '/delete'] = array(
      'title' => t('Delete'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('smartdocs_model_delete', 3),
      'access arguments' => array('administer smartdocs content'),
      'file' => 'admin/smartdocs.models.inc',
      'weight' => 100,
    );
  }
  return $items;
}

/**
 * Implements hook_flush_caches().
 *
 * @return array
 */
function smartdocs_flush_caches() {
  return array('cache_docgen');
}


/**
 * SmartDocs Settings Form
 *
 * @param $form
 * @param $form_state
 * @param null $model
 * @return mixed
 */
function smartdocs_settings($form, $form_state, $model = NULL) {
  $form['cache_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cache Settings for SmartDocs'),
    '#collapsed' => FALSE,
    '#collapsible' => FALSE,
  );
  $form['cache_settings']['clear_cache'] = array(
    '#type' => 'submit',
    '#value' => t('Clear SmartDocs HTML Caches'),
    '#submit' => array('devconnect_docgen_clear_caches')
  );
  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Settings'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $form['settings']['use_docgen_templates'] = array(
    '#type' => 'checkbox',
    '#disabled' => TRUE,
    '#title' => t('Use Modeling Template System'),
    '#default_value' => variable_get('use_docgen_templates', 1),
    '#description' => t('By enabling this setting, you will override all node templates with model templates.'),
    '#suffix' => '<br/>',
  );
  $form['settings']['api_proxy'] = array(
    '#type' => 'fieldset',
    '#title' => t('Management API Override Settings'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $form['settings']['api_proxy']['use_local_assets'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Local SmartDocs JS/CSS'),
    '#default_value' => variable_get('use_local_assets', 0),
    '#description' => t('By enabling this setting, you will use local assets hosted by DevPortal.'),
    '#suffix' => '<br/>',
  );
  $form['settings']['api_proxy']['use_api_proxy_url'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Management API URL Override'),
    '#default_value' => variable_get('use_api_proxy_url', 0),
    '#description' => t('By enabling this setting, you will override the default devportal endpoint for SmartDocs calls.'),
    '#suffix' => '<br/>',
  );
  $form['settings']['api_proxy']['api_proxy_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Management API URL Override'),
    '#default_value' => variable_get('api_proxy_url', 'https://api.enterprise.apigee.com/v1'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function smartdocs_theme($existing, $type, $theme, $path) {
  return array(
    'smartdocs_models_table' => array(
      'render element' => 'form',
      'file' => 'smartdocs.theme.inc'
    ),
    'smartdocs_revisions_table' => array(
      'render element' => 'form',
      'file' => 'smartdocs.theme.inc'
    ),
  );
}

/**
 * Makes model name usable across the system.
 *
 * @param $model
 * @param bool $field
 * @return string
 */
function smartdocs_model_name($model) {
  $data = &drupal_static(__FUNCTION__);
  if (!isset($data)) {
    $mid = strtolower(preg_replace(array(
      '/[^a-zA-Z0-9]+/',
      '/-+/',
      '/^-+/',
      '/-+$/',
    ), array('_', '_', '', ''), $model));
    $data = substr($mid, 0, 32);
    variable_set($model . '_content_type', $data);
  }
  return $data;
}

/**
 * Makes model name usable across fields with one way hash
 *
 * @param $model
 * @return string
 */
function smartdocs_field_name($model) {
  $data = &drupal_static(__FUNCTION__);
  if (!isset($data)) {
    $mid = strtolower(preg_replace(array(
      '/[^a-zA-Z0-9]+/',
      '/-+/',
      '/^-+/',
      '/-+$/',
    ), array('_', '_', '', ''), $model));
    $hash = hash('md4', preg_replace('/[^a-zA-Z0-9]/', '', $mid));
    if (strlen($mid) > 8) {
      $data = substr($mid, 0, 4) . substr($hash, -4);
    } else {
      $data = substr($mid, 0, 8);
    }
    variable_set($model . '_field_type', $data);
  }
  return $data;
}

/**
 * Implements hook_entity_info().
 *
 * @return array
 */
function smartdocs_entity_info() {
  $info = array();
  $info['smartdocs_model'] = array(
    'label' => t('SmartDocs Model'),
    'controller class' => 'SmartDocsModelController',
    'fieldable' => TRUE,
    'base table' => 'smartdocs',
    'entity keys' => array(
      'id' => 'sid',
    ),
  );
  $info['smartdocs_revision'] = array(
    'label' => t('SmartDocs Revision'),
    'controller class' => 'SmartDocsRevisionController',
    'fieldable' => TRUE,
    'base table' => 'smartdocs',
    'entity keys' => array(
      'id' => 'sid',
    ),
  );
  $info['smartdocs_resource'] = array(
    'label' => t('SmartDocs Resource'),
    'controller class' => 'SmartDocsResourceController',
    'static cache' => TRUE,
    'base table' => 'smartdocs',
    'entity keys' => array(
      'id' => 'sid',
    ),
  );
  $info['smartdocs_method'] = array(
    'label' => t('SmartDocs Methods'),
    'controller class' => 'SmartDocsMethodController',
    'fieldable' => TRUE,
    'base table' => 'smartdocs',
    'entity keys' => array(
      'id' => 'sid',
    ),
  );
  $info['smartdocs_doc'] = array(
    'label' => t('SmartDocs Doc'),
    'controller class' => 'SmartDocsDocController',
    'fieldable' => TRUE,
    'base table' => 'smartdocs',
    'entity keys' => array(
      'id' => 'sid',
    ),
  );
  $info['smartdocs_template'] = array(
    'label' => t('SmartDocs Template'),
    'controller class' => 'SmartDocsTemplateController',
    'fieldable' => TRUE,
    'base table' => 'smartdocs',
    'entity keys' => array(
      'id' => 'sid',
    ),
  );
  return $info;
}

/**
 * Implements hook_views_api().
 *
 * @return array
 */
function smartdocs_views_api() {
  return array(
    'api' => 2.0,
  );
}

/**
 * Implements hook_views_default_views().
 *
 * @return array
 */
function smartdocs_views_default_views() {
  $wrappers = stream_get_wrappers();
  if (!in_array('private', $wrappers)) {
    return array();
  }
  $views = array();
  $files = file_scan_directory('private://', '/\.view$/');
  foreach ($files as $absolute => $file) {
    require $absolute;
    if (isset($view)) {
      $views[$file->name] = $view;
    }
  }
  return $views;
}
