<?php

/**
 * Implements hook_requirements().
 *
 * Ensures that mcrypt is present at install time.
 *
 * @param $phase
 * @return array
 */
function devconnect_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase == 'install') {

    if (!defined('MCRYPT_RIJNDAEL_128')) {
      $requirements['mcrypt'] = array(
        'description' => 'PHP must have the mcrypt library for DevConnect to work.',
        'severity' => REQUIREMENT_ERROR,
        'value' => $t('Please install the PHP mcrypt extension.'),
        'title' => $t('Missing library'),
      );
    }

    if (!defined('CURLE_OK')) {
      $requirements['cURL'] = array(
        'description' => 'PHP must have the cURL library for DevConnect to work.',
        'severity' => REQUIREMENT_ERROR,
        'value' => $t('Please install the PHP cURL extension.'),
        'title' => $t('Missing library'),
      );
    }
  }
  if ($phase == 'runtime') {

    module_load_include('module', 'devconnect');
    module_load_include('module', 'd8cmi');
    // Make sure all autoloaders are registered
    devconnect_boot();
    d8cmi_init();

    $config = Drupal::config('devconnect.settings');
    $org = $config->get('org');
    $endpoint = $config->get('endpoint');
    $user = $config->get('user');
    $pass = Apigee\Util\Crypto::decrypt($config->get('pass'));

    if (_devconnect_test_kms_connection($org, $endpoint, "$user:$pass", TRUE)) {
      $requirements['devconnect_connection'] = array(
        'severity' => REQUIREMENT_OK,
        'title' => 'DevConnect Connection',
        'value' => $t('DevConnect is connected to the management server.'),
      );
    }
    else {
      $requirements['devconnect_connection'] = array(
        'severity' => REQUIREMENT_ERROR,
        'title' => 'DevConnect Connection',
        'value' => $t('DevConnect is not connected to the management server.'),
        'description' => $t('To configure these settings, please go to @url.' , array('@url' => base_path() . 'admin/config/devconnect')),
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 *
 * Cleans up old devconnect_apigee variable and gives Drupal Admins permissions
 * to administer org settings.
 */
function devconnect_install() {
  variable_del('devconnect_oauth_policies');

  $role = user_role_load_by_name('Drupal Administrator');
  if ($role) {
    user_role_grant_permissions($role->rid, array('administer organization settings'));
  }
  $role = user_role_load_by_name('Administrator');
  if ($role) {
    user_role_grant_permissions($role->rid, array('administer organization settings'));
  }
}

/**
 * Disable deprecated modules in preparation for their removal in R24.
 */
function devconnect_update_7423(&$sandbox) {
  // Make sure Apigee autoloader has been run
  drupal_load('module', 'devconnect');
  devconnect_boot();

  $list = db_select('system', 's')
    ->condition('type', 'module')
    ->condition('status', 0)
    ->condition('name', 'devconnect%', 'LIKE')
    ->fields('s', array('name', 'filename'))
    ->execute()
    ->fetchAll(PDO::FETCH_NUM);
  $missing_modules = array();


  foreach ($list as $module) {
    list($name, $filename) = $module;
    if (!file_exists(DRUPAL_ROOT . '/' . $filename)) {
      $missing_modules[] = $name;
    }
  }

  if (count($missing_modules) > 0) {
    if (function_exists('drush_print')) {
      drush_print('Removing these missing modules: ' . join(', ', $missing_modules));
    }
    db_delete('system')
      ->condition('type', 'module')
      ->condition('name', $missing_modules)
      ->execute();
  }

  $disable_modules = array(
    'devconnect_apigee',
    'devconnect_validate',
    'devconnect_faq_ext'
  );

  if (function_exists('drush_print')) {
    drush_print('Disabling these modules: ' . join(', ', $disable_modules));
  }

  module_disable($disable_modules, FALSE);

  // Possible stale table left from removed devconnect_node_settings module.
  if (db_table_exists('node_settings')) {
    db_drop_table('node_settings');
  }

  variable_del('devconnect_appname_bug');
  variable_del('devconnect_oauth_token_urls');
}

/**
 * Correctly configure ckeditor javascript configuration if the ckeditor module is enabled
 *
 * @param $sandbox
 */
function devconnect_update_7424(&$sandbox) {
  /**
   * Fix for https://apigeesc.atlassian.net/browse/DEVCHAN-30
   *
   * This update should append config.allowedContent = true; to the javascript configuration
   *
   */
  if (module_exists('ckeditor')) {
    if (function_exists('drush_print')) {
      drush_print('Allowing default content in ckeditor');
    }
    $query = db_select('ckeditor_settings', 'c')
      ->fields('c', array('name', 'settings'));
    $result = $query->execute();
    foreach ($result as $res) {
      $name = $res->name;
      $settings = unserialize($res->settings);
      if (isset($settings['js_conf'])) {
        $allow = 'config.allowedContent = true;';
        $settings['js_conf'] = $allow;
        if (!empty($name)) {
          $update = db_update('ckeditor_settings')
            ->fields(array(
              'settings' => serialize($settings),
            ))->condition('name', $res->name, '=');
          $update->execute();
        }
      }
    }
  }

  if (!module_exists('d8cmi')) {
    module_enable(array('d8cmi'));
  }
  devconnect_port_settings_to_d8cmi();
  if (module_exists('devconnect_wadl')) {
    module_disable(array('devconnect_wadl'), FALSE);
  }
}

function devconnect_port_settings_to_d8cmi() {
  module_load_include('module', 'devconnect');
  module_load_include('module', 'd8cmi');
  // Make sure all autoloaders are registered
  devconnect_boot();
  d8cmi_init();

  $config = Drupal::config('devconnect.settings');

  $org = variable_get('devconnect_org', $config->get('org'));
  $config->set('org', $org);

  $endpoint = variable_get('devconnect_endpoint', $config->get('endpoint'));
  $config->set('endpoint', $endpoint);

  $curlauth = variable_get('devconnect_curlauth', NULL);
  if ($curlauth) {
    list($user, $pass) = explode(':', $curlauth, 2);
    $config->set('user', $user);
    $config->set('pass', $pass);
  }

  $threshold = variable_get('apigee_log_threshold', $config->get('log_threshold'));
  $config->set('log_threshold', $threshold);

  $config->save();

  variable_del('devconnect_org');
  variable_del('devconnect_endpoint');
  variable_del('devconnect_curlauth');
  variable_del('apigee_log_threshold');
}
