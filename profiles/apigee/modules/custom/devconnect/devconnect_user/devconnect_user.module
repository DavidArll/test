<?php
/**
 * @file
 * Augments Drupal's basic user functionality to handle extra
 * API-interfacing functionality.
 */

require_once(__DIR__ . '/controllers/DeveloperController.php');
require_once(__DIR__ . '/entities/DeveloperEntity.php');

require_once(__DIR__ . '/devconnect_user.sync.inc');
require_once(__DIR__ . '/devconnect_user.admin.inc');
require_once(__DIR__ . '/devconnect_user.tokens.inc');
require_once(__DIR__ . '/devconnect_user.user.inc');

define('DEVCONNECT_USER_ASYNC_MAX_RETRIES', 5);

/**
 * Implements hook_permission().
 */
function devconnect_user_permission() {
  return array(
    "administer devconnect_user settings" => array(
      "title" => t("Administer DevConnect Developers."),
      "description" => t("Perform administration tasks for Apigee DevConnect Developers."),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function devconnect_user_menu() {
  $items = array();
  $items['admin/people/sync'] = array(
    'title' => 'Dev Portal Developer Sync',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_user_sync_confirm_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'api_products',
    'file' => 'devconnect_user.sync.inc',
  );
  $items['admin/config/devconnect/user-settings'] = array(
    'title' => 'Dev Portal User Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_user_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'devconnect_user.admin.inc',
  );
  $items['admin/config/devconnect/user-attributes'] = array(
    'title' => 'Dev Portal User Attributes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_user_attributes_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'devconnect_user.admin.inc',
  );

  $items['developer-queue/retry/%'] = array(
    'title' => 'Retry Queue Item',
    'page callback' => 'devconnect_user_queue_retry',
    'page arguments' => array(2),
    'access arguments' => array('administer devconnect_user settings'),
    'type' => MENU_CALLBACK
  );

  $items['developer-queue/delete/%'] = array(
    'title' => 'Delete Queue Item',
    'page callback' => 'devconnect_user_queue_delete',
    'page arguments' => array(2),
    'access arguments' => array('administer devconnect_user settings'),
    'type' => MENU_CALLBACK
  );


  return $items;
}

/**
 * Implements hook_module_implements_alter().
 *
 * Removes logintoboggan's implementation of hook_form_FORM_ID_alter()
 * for user_register_form, which causes all kinds of issues.
 *
 * @see devconnect_user_form_alter for further comments on this bizarre dance.
 */
function devconnect_user_module_implements_alter(&$implementations, $hook) {
  if (($hook == 'form_user_register_form_alter' || $hook == 'form_alter') && array_key_exists('logintoboggan', $implementations)) {
    unset($implementations['logintoboggan']);
  }
}

/**
 * Implements hook_entity_info().
 */
function devconnect_user_entity_info() {
  $info = array(
    'developer' => array(
      'label' => t('Developer'),
      'controller class' => 'DeveloperController',
      'fieldable' => FALSE,
    ),
  );
  return $info;
}

/**
 * Implements hook_form_alter().
 */
function devconnect_user_form_alter(&$form, &$form_state, $form_id) {

  // In hook_module_implements_alter() above, we removed
  // logintoboggan_form_alter() so that we could also remove
  // logintoboggan_form_user_register_form_alter(). (This is due to the way
  // Drupal handles drupal_alter() with multiple hooks.) We must now reinstate
  // logintoboggan_form_alter() if it exists.
  if (function_exists('logintoboggan_form_alter')) {
    logintoboggan_form_alter($form, $form_state, $form_id);
  }

  switch ($form_id) {
    case 'user_login':
      $form['name']['#attributes']['autocomplete'] = 'off';
      $form['pass']['#attributes']['autocomplete'] = 'off';
      break;

    case 'user_profile_form':

      if ($form['#user_category'] != 'account' && $form['#user_category'] != 'register') {
        return;
      }

      // Breadcrumb navigation.
      $user = $form['#user'];
      // Determine nicely-displayable user name.
      $user_name = $user->name; // default value.
      if (property_exists($user, 'field_first_name') && property_exists($user, 'field_last_name')) {
        if (isset($user->field_first_name[LANGUAGE_NONE][0]['value']) && isset($user->field_last_name[LANGUAGE_NONE][0]['value'])) {
          $first_name = $user->field_first_name[LANGUAGE_NONE][0]['value'];
          $last_name = $user->field_last_name[LANGUAGE_NONE][0]['value'];
          if (!empty($first_name) && !empty($last_name)) {
            $user_name = "$first_name $last_name";
          }
        }
      }
      $breadcrumb = array(
        t('Home') => NULL,
        $user_name => 'user',
      );
      drupal_set_title(t('Edit Profile'));
      drupal_set_breadcrumb($breadcrumb);

      $tnc_url = _devconnect_user_get_tnc_url($form['#user']);
      if ($tnc_url == 'legal' && module_exists('legal')) {
        if (isset($form['field_terms_and_conditions'])) {
          unset($form['field_terms_and_conditions']);
        }
      }

      // Email address is now immutable, to keep it in line with
      // Edge product requirements.
      $form['account']['mail']['#disabled'] = TRUE;
      $form['account']['mail']['#description'] = t('All emails from the system will be sent to this address.');
      $form['account']['mail']['#title'] = str_replace('E-mail', 'Email', $form['account']['mail']['#title']);
      $form['account']['current_pass']['#description'] = t('Enter your current password to change your password.')
        . ' '
        . l(t('Request new password'), 'user/password', array('attributes' => array('title' => t('Request new password via email.'))))
        . '.';

      // Add a link to openid admin page only if the openid module is enabled
      if (module_exists('openid')) {
        $middle_arg = (module_exists('me') && $form['#user']->uid == $GLOBALS['user']->uid) ? 'me' : $form['#user']->uid;
        $form['openid'] = array(
          '#markup' => l(t('Manage your OpenIDs'), 'user/' . $middle_arg . '/openid'),
          '#prefix' => '<div class="control-group form-openid"><div class="control-label" style="margin-bottom: 5px;">',
          '#suffix' => '</div></div>',
          '#weight' => 2,
        );
        return;
      }
      break;

    case 'user_register_form':
      $account_weight = (array_key_exists('#weight', $form['account']) ? $form['account']['#weight'] : -10);
      $form['field_first_name']['#weight'] = $account_weight - 2;
      $form['field_last_name']['#weight'] = $account_weight - 1;

      drupal_add_css(drupal_get_path('module', 'devconnect_user') . '/devconnect_user.css',
        array('group' => CSS_THEME, 'every_page' => TRUE)
      );

      $tnc_url = _devconnect_user_get_tnc_url($form['#user']);
      if ($tnc_url == 'legal' && module_exists('legal')) {
        if (isset($form['field_terms_and_conditions'])) {
          unset($form['field_terms_and_conditions']);
        }
      }
      else {
        $form['field_terms_and_conditions']['#prefix'] = '<div id="terms-field">';
        $form['field_terms_and_conditions']['#suffix'] = '</div>';
        $form['field_terms_and_conditions'][LANGUAGE_NONE]['#title'] = t('I agree to the <a href="@url" target="_blank">Terms of Use</a>', array('@url' => $tnc_url));
      }
      break;

    case 'logintoboggan_main_settings':
      // Since we bypass logintoboggan's user-registration handling, it makes
      // no sense to display its options, so we hide them here.
      $form['registration']['#access'] = FALSE;
      break;
  }
}

/**
 * Determines the URL of the Terms & Conditions URL.
 *
 * First, checks to see if Legal module is enabled and is configured.
 * If not, checks to see if any custom modules implement hook_tnc_url().
 * Finally, if neither of the above is true, pulls value from Drupal variable.
 *
 * @param null|stdClass $user User account to check for, if any.
 * @return string URL of terms-and-conditions page.
 */
function _devconnect_user_get_tnc_url($user = NULL) {
  $tnc_url = NULL;
  if (module_exists('legal')) {
    $conditions = legal_get_conditions();
    if (!empty($conditions['version'])) {
      $tnc_url = 'legal';
    }
  }
  if (!isset($tnc_url)) {
    foreach (module_implements('tnc_url') as $module) {
      $tnc_url = call_user_func($module . '_tnc_url', $user);
      break;
    }
  }
  if (!isset($tnc_url)) {
    $tnc_url = url(variable_get('devconnect_user_tnc_url', 'basic-page/terms-use'));
  }
  return $tnc_url;
}

/**
 * Determines a user entity value for a given field key.
 *
 * @param string $field Field key to search for.
 * @param array $edit Array of submitted form values.
 * @param stdClass $account Fully-populated User object.
 * @param mixed $default Default value to be returned if field does not exist.
 *
 * @return mixed
 */
function _devconnect_user_get_field_value($field, array $edit, stdClass $account, $default = '') {

  $edit_value = $default;
  if (array_key_exists($field, $edit)) {
    if (is_scalar($edit[$field])) {
      $edit_value = $edit[$field];
    }
    elseif (is_array($edit[$field]) && array_key_exists(LANGUAGE_NONE, $edit[$field]) && !empty($edit[$field][LANGUAGE_NONE])) {
      if (is_scalar($edit[$field][LANGUAGE_NONE])) {
        $edit_value = $edit[$field][LANGUAGE_NONE];
      }
      else {
        $temp_value = reset($edit[$field][LANGUAGE_NONE]);
        if (is_scalar($temp_value)) {
          $edit_value = $temp_value;
        }
        elseif (array_key_exists('value', $temp_value)) {
          $edit_value = $temp_value['value'];
        }
      }
    }
  }
  $account_value = $default;
  if (property_exists($account, $field)) {
    $account_field = $account->$field;
    if (is_scalar($account_field)) {
      $account_value = $account_field;
    }
    elseif (is_array($account_field) && array_key_exists(LANGUAGE_NONE, $account_field) && !empty($account_field[LANGUAGE_NONE])) {
      if (is_scalar($account_field[LANGUAGE_NONE])) {
        $account_value = $account_field[LANGUAGE_NONE];
      }
      else {
        $temp_value = reset($account_field[LANGUAGE_NONE]);
        if (is_scalar($temp_value)) {
          $account_value = $temp_value;
        }
        elseif (array_key_exists('value', $temp_value)) {
          $account_value = $temp_value['value'];
        }
      }
    }
  }
  return $edit_value == $default ? $account_value : $edit_value;
}


/**
 * Guarantees that a given field value is displayable as a string.
 *
 * @param mixed $field_value Value to be stringified.
 *
 * @return string String representation of field value.
 */
function _devconnect_user_scrub_attribute($field_value) {
  if (is_object($field_value) || is_array($field_value)) {
    $field_value = json_encode($field_value);
  }
  // Booleans are saved as their string value.
  elseif ($field_value === TRUE) {
    $field_value = 'true';
  }
  elseif ($field_value === FALSE) {
    $field_value = 'false';
  }
  // Force ints/floats to string too.
  else {
    $field_value = (string) $field_value;
  }
  return $field_value;
}

/**
 * Returns DeveloperID for a user.
 *
 * Checks to see if developer_id has been set in $_SESSION. If not, we look
 * it up (in local cache or in Edge) and set it.
 *
 * @param stdClass $user User to query for DeveloperID
 * @return string|bool DeveloperID for user, or FALSE if not found.
 */
function devconnect_user_get_developer_id($user) {
  $developer_id = FALSE;
  if (!array_key_exists('developer_id', $_SESSION)) {
    $_SESSION['developer_id'] = NULL;
  }

  if ($_SESSION['developer_id'] === NULL) {
    $mail = $user->mail;
    // First, check local cache.
    $query = db_select('dc_dev', 'd');
    $query->innerJoin('users', 'u', 'u.uid = d.uid');
    $developer_id = $query->condition('u.mail', $mail)
      ->fields('d', array('developer_id'))
      ->execute()
      ->fetchField();
    if (empty($developer_id)) {
      // Not found in local cache.
      $controller = entity_get_controller('developer');
      $entity = $controller->loadIfExists($mail);
      if (!empty($entity)) {
        $developer_id = $entity->developerId;
      }
    }
  }
  $_SESSION['developer_id'] = $developer_id;
  return $developer_id;
}

/**
 * Implements hook_form_FORM_ID_alter() for user_admin_account().
 */
function devconnect_user_form_user_admin_account_alter(&$form, &$form_state) {
  // Add selectable developers to synch up to Edge.
  $form['options']['operation']['#options']['synchup_devconnect'] = t('Sync Developer With DevConnect');
  $form['#submit'][] = 'devconnect_user_form_user_admin_account_alter_submit';
}

/**
 * Submit handler for Developer Sync.
 *
 * @param array $form
 * @param array $form_state
 * @throws Exception
 */
function devconnect_user_form_user_admin_account_alter_submit(&$form, &$form_state) {

  switch ($form_state['values']['operation']) {
    case 'synchup_devconnect':
      $account_ids = array_values($form_state['values']['accounts']);

      $list_items = array();

      $users = db_select('users', 'u')
        ->fields('u', array('uid', 'mail'))
        ->condition('u.uid', 0, '>')
        ->condition('u.uid', $account_ids, 'IN')
        ->execute()
        ->fetchAll(PDO::FETCH_OBJ);
      if (empty($users)) {
        drupal_set_message(t('No users were synced.'), 'status');
        return;
      }

      $emails = array();
      foreach ($users as $user) {
        $emails[] = $user->mail;
      }
      $developers = entity_load('developer', $emails);

      foreach ($users as $user) {
        if (array_key_exists($user->mail, $developers)) {
          $list_items[] = 'User ' . $user->mail . ' already exists on server.';
        }
        else {
          $user_obj = user_load($user);
          $list_items[] = _devconnect_user_save_entity($user_obj);
        }
      }

      $list_params = array(
        'items' => $list_items,
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array(),
      );

      drupal_set_message(theme('item_list', $list_params), 'status');
      break;
  }
}

/**
 * Given a Drupal user object, saves the corresponding developer entity.
 *
 * @param stdClass $user User to be saved as a Developer entity.
 *
 * @return string Message indicating success or failure.
 */
function _devconnect_user_save_entity($user) {
  $account = user_load($user->uid);
  $values = array(
    'email' => $account->mail,
    'userName' => $account->name,
    'status' => ($account->status ? 'active' : 'inactive'),
    'attributes' => array(),
  );
  if (property_exists($account, 'field_first_name') && array_key_exists(LANGUAGE_NONE, $account->field_first_name) && array_key_exists(0, $account->field_first_name[LANGUAGE_NONE]) && array_key_exists('value', $account->field_first_name[LANGUAGE_NONE][0])) {
    $values['firstName'] = $account->field_first_name[LANGUAGE_NONE][0]['value'];
  }
  if (property_exists($account, 'field_last_name') && array_key_exists(LANGUAGE_NONE, $account->field_last_name) && array_key_exists(0, $account->field_last_name[LANGUAGE_NONE]) && array_key_exists('value', $account->field_last_name[LANGUAGE_NONE][0])) {
    $values['lastName'] = $account->field_last_name[LANGUAGE_NONE][0]['value'];
  }
  $vars = get_object_vars($account);
  foreach ($vars as $key => $value) {
    if (substr($key, 0, 10) == 'attribute_') {
      $values['attributes'][substr($key, 10)] = $value;
    }
  }
  $entity = entity_create('developer', $values);
  try {
    entity_save('developer', $entity);
    $message = 'User ' . $account->name . ' created on server';
  }
  catch (Exception $e) {
    $message = 'User ' . $account->name . ' not created on server. ' . $e->getMessage()
      . (function_exists('kprint_r') ? kprint_r(devconnect_get_debug_data(), TRUE) : '<pre>' . print_r(devconnect_get_debug_data(), TRUE) . '</pre>');
  }
  return $message;
}

/**
 * Determines if a given email is owned by an org or ops administrator.
 *
 * @param string $email Email address to be checked
 *
 * @return bool TRUE if email is configured as an org/ops admin.
 */
function devconnect_user_is_org_admin($email) {
  static $admins = array();
  if (empty($admins)) {
    // This function is sometimes called before bootstrapping is complete.
    if (!class_exists('Apigee\ManagementAPI\UserRole')) {
      devconnect_init();
    }

    $orgs = module_invoke_all('get_configured_orgs');
    if (empty($orgs)) {
      $orgs = array('default');
    }

    foreach ($orgs as $org) {
      $ur = new Apigee\ManagementAPI\UserRole(devconnect_default_org_config($org));
      try {
        $admins = array_merge(
          $ur->getUsersByRole('opsadmin'),
          $ur->getUsersByRole('orgadmin')
        );
        $admins = array_unique(array_map('strtolower', $admins));
        if (in_array(strtolower($email), $admins)) {
          return TRUE;
        }
      }
      catch (Apigee\Exceptions\ResponseException $e) {
      }
    }
  }
  return FALSE;
}

/**
 * Finds all role IDs pertaining to administrative roles.
 *
 * @return array List of Role IDs
 */
function devconnect_user_get_admin_rids() {
  static $rids = NULL;

  if (!isset($rids)) {
    $rids = array();
    $roles = user_roles(TRUE);
    foreach ($roles as $rid => $role) {
      if (stripos($role, 'administrator') !== FALSE) {
        $rids[] = $rid;
      }
    }
  }
  return $rids;
}

/**
 * Implements hook_views_api().
 */
function devconnect_user_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'devconnect_user'),
  );
}


/**
 * Deletes references to a specific developer entity from our internal cache.
 *
 * Also removes cached references to any of this developer's apps.
 *
 * @param Drupal\devconnect_user\DeveloperEntity $entity
 *   Developer entity to be deleted from cache.
 */
function devconnect_user_delete_from_cache(Drupal\devconnect_user\DeveloperEntity $entity) {
  $developer_ids = $uid = NULL;
  if (empty($entity->developerId)) {
    $_user = user_load_by_mail($entity->email);
    if (is_object($_user)) {
      $uid = $_user->uid;
      $developer_ids = db_select('dc_dev', 'd')
        ->fields('d', array('developer_id'))
        ->condition('uid', $uid)
        ->execute()
        ->fetchCol();
    }
  }
  else {
    $developer_ids = array($entity->developerId);
  }
  if (!empty($developer_ids)) {
    db_delete('dc_dev_attributes')
      ->condition('developer_id', $developer_ids)
      ->execute();
    db_delete('dc_dev')->condition('developer_id', $developer_ids)->execute();

    // Now delete developer's apps as well.
    if (!empty($uid)) {
      $app_ids = array();
      $result = db_select('dc_dev_app', 'a')
        ->fields('a', array('app_id'))
        ->condition('uid', $uid)
        ->execute();
      while ($app_id = $result->fetchCol()) {
        $app_ids[] = $app_id;
      }
      if (!empty($app_ids)) {
        db_delete('dc_dev_app_api_products')->condition('app_id', $app_ids);
        db_delete('dc_dev_app_attributes')->condition('app_id', $app_ids);
        db_delete('dc_dev_app_previous_status')->condition('app_id', $app_ids);
        db_delete('dc_dev_app')->condition('app_id', $app_ids);
      }
    }
  }
}

function devconnect_user_read_from_cache($criteria = array(), $retrying = FALSE) {
  $query = db_select('dc_dev', 'd')->fields('d');
  foreach ($criteria as $name => $value) {
    $query->condition($name, $value);
  }
  $developers = array();
  $result = $query->execute();
  while ($row = $result->fetchAssoc()) {
    $dev = new Drupal\devconnect_user\DeveloperEntity();
    $dev->developerId = $row['developer_id'];
    $dev->uid = $row['uid'];
    $dev->status = $row['status'];
    $developers[$dev->developerId] = $dev;
  }
  if (empty($developers)) {
    if (!$retrying) {
      $devs = entity_load('developer');
      if (count($devs) > 0) {
        foreach ($devs as $dev) {
          devconnect_user_write_to_cache($dev);
        }
        return devconnect_user_read_from_cache($criteria, TRUE);
      }
    }
    return array();
  }

  $result = db_select('dc_dev_attributes', 'd')
    ->fields('d')
    ->condition('developer_id', array_keys($developers))
    ->execute();
  foreach ($result as $row) {
    $developers[$row->developer_id]->attributes[$row->name] = $row->value;
  }
  $result = db_select('dc_dev_companies', 'd')
    ->fields('d')
    ->condition('developer_id', array_keys($developers))
    ->execute();
  foreach ($result as $row) {
    $developers[$row->developer_id]->companies[] = $row->company;
  }
  return $developers;
}

/**
 * Writes a developer entity to our internal cache.
 *
 * By default we delete any references to this entity from our cache before
 * writing, but when $ensure_clean is set to FALSE we can skip this step.
 * In real life this occurs when the table has been freshly truncated.
 *
 * @param Drupal\devconnect_user\DeveloperEntity $entity
 *   Entity to be written to cache
 * @param bool $ensure_clean
 *   If TRUE, entity is expunged from cache before writing.
 */
function devconnect_user_write_to_cache(Drupal\devconnect_user\DeveloperEntity $entity, $ensure_clean = TRUE) {
  if ($ensure_clean) {
    devconnect_user_delete_from_cache($entity);
  }
  $fields = array(
    'developer_id' => $entity->developerId,
    'uid' => intval($entity->uid),
    'status' => intval($entity->status == 'active'),
  );
  db_insert('dc_dev')->fields($fields)->execute();
  foreach ($entity->attributes as $name => $value) {
    // @TODO: Decide either to accept NULL values or skip them.
    // Temporary fix for NULL values not being accepted in DB.
    if (!isset($value)) {
      continue;
    }
    db_insert('dc_dev_attributes')
      ->fields(array(
        'developer_id' => $entity->developerId,
        'name' => $name,
        'value' => $value,
      ))
      ->execute();
  }
}

/**
 * Implements hook_cron().
 *
 * Refreshes our developer caches.
 */
function devconnect_user_cron() {
  $has_drush = function_exists('drush_print');
  // Do not try to rebuild caches if we're not yet configured.
  $org_config = devconnect_default_org_config();
  if (empty($org_config->orgName)) {
    return;
  }

  if (lock_acquire(__FUNCTION__ . '_developers', 5)) {
    if ($has_drush) {
      drush_print('Loading all developers from Edge');
    }
    $devs = entity_load('developer');
    if ($has_drush) {
      drush_print('Loaded ' . (count($devs)) . ' developer(s) from Edge');
    }
    $count = count($devs);

    if ($count) {
      module_load_install('devconnect_user');
      $tables = array_keys(devconnect_user_schema());
      foreach ($tables as $table) {
        if ($has_drush) {
          drush_print('Truncating ' . $table);
        }
        db_truncate($table)->execute();
      }
      $devs = array_values($devs);
      foreach ($devs as $i => $dev) {
        if ($has_drush) {
          drush_print('writing dev ' . ($i + 1) . ' of ' . $count . ': ' . $dev->email);
        }
        devconnect_user_write_to_cache($dev, FALSE);
      }
    }
    lock_release(__FUNCTION__ . '_developers');
  }

  devconnect_user_process_queue();
}


/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Removes the OpenID identities tab
 */
function devconnect_user_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (arg(0) == 'user' && array_key_exists('tabs', $data) && is_array($data['tabs'])) {
    if (isset($data['tabs'])) {
      foreach ($data['tabs'] as $i => $menu_item) {
        if (array_key_exists('output', $menu_item) && is_array($menu_item['output'])) {
          foreach ($menu_item['output'] as $j => $sub_item) {
            switch ($sub_item['#link']['path']) {
              case 'user/%/view':
              case 'user/%/openid':
                unset($data['tabs'][$i]['output'][$j]);
                $data['tabs'][$i]['count']--;
                break;

              case 'user/%/edit':
                $data['tabs'][$i]['output'][$j]['#link']['title'] = 'Edit User Profile';
                break;
            }
          }
        }
      }
    }
  }
}

/**
 * Kicks off the queue processing for submitting developer info.
 *
 * If we are on a non-Windows box and a PHP executable is in the path, we start
 * an async job to process the queue. Otherwise we attempt to do the job
 * in-process.
 *
 * Monetization requires that users are processed in Edge in realtime, so we
 * cannot do this asynchronously when that module is enabled.
 */
function devconnect_user_start_queue_process() {
  if (variable_get('devconnect_user_enable_async', 0) && !module_exists('devconnect_monetization') && ($cli = devconnect_php_cli())) {
    // Do things asynchronously.
    if (isset($_SERVER['PRESSFLOW_SETTINGS'])) {
      $arg = '"' . addslashes($_SERVER['PRESSFLOW_SETTINGS']) . '"';
      if (isset($_SERVER['PANTHEON_SITE_NAME']) && isset($_SERVER['PANTHEON_ENVIRONMENT'])) {
        $arg = ' ' . $_SERVER['PANTHEON_SITE_NAME'] . ' ' . $_SERVER['PANTHEON_ENVIRONMENT'];
      }
    }
    else {
      $arg = '';
    }

    $path = DRUPAL_ROOT . '/' . drupal_get_path('module', 'devconnect_user') . '/async/developer-queue.php';
    $command = "$cli $path $arg > /dev/null 2>&1 &";
    exec($command);
  }
  else {
    // Sigh. Must do things in-process.
    devconnect_user_process_queue();
  }
}

/**
 * Go through the developer queue and process each pending item.
 */
function devconnect_user_process_queue() {
  $queue = DrupalQueue::get('developer');
  while (($item = $queue->claimItem(15)) !== FALSE) {
    $success = devconnect_user_process_queue_item($item);
    if ($success === TRUE) {
      $queue->deleteItem($item);
    }
    else {
      $retries = variable_get('developer_queue_retries_' . $item->item_id, 0);
      if (function_exists('drush_log')) {
        if ($retries == 0) {
          $which = 'first attempt';
        }
        else {
          $which = 'retry #' . $retries;
        }
        drush_log(dt('Failed saving developer to Edge (@which)', array('@which' => $which)), 'warning');
      }
      if ($retries >= DEVCONNECT_USER_ASYNC_MAX_RETRIES) {
        variable_del('developer_queue_retries_' . $item->item_id);
        $queue->deleteItem($item);
        // Fire off an email.
        devconnect_user_notify_async_fail($item->data);
      }
      else {
        variable_set('developer_queue_retries_' . $item->item_id, $retries + 1);
        // Do not release the item, so that retries won't happen for another
        // 15 seconds.
      }
    }
  }
}

/**
 * Menu callback to remove a save request from the queue.
 *
 * @param int $item_id
 */
function devconnect_user_queue_delete($item_id) {
  variable_del('developer_queue_retries_' . $item_id);
  $num_rows = db_delete('queue')->condition('item_id', $item_id)->execute();
  if ($num_rows) {
    drupal_set_message(t('Queued developer save request deleted!'));
  }
  else {
    drupal_set_message(t('Queued developer save request not deleted.'), 'warning');
  }
  drupal_goto('admin/config/people/developer-save-queue');
}

/**
 * Menu callback to retry a queued developer save request.
 *
 * @param int $item_id
 */
function devconnect_user_queue_retry($item_id) {

  $item = db_select('queue', 'q')
    ->fields('q')
    ->condition('name', 'developer')
    ->condition('item_id', $item_id)
    ->execute()
    ->fetchObject();

  if (!$item) {
    drupal_set_message(t('This queued developer has already been processed.'), 'warning');
  }
  elseif ($item->expires != 0) {
    drupal_set_message(t('This queued developer may already be claimed by another process.'), 'warning');
  }
  else {
    db_update('queue')->fields(array('expire' => time() + 15))->condition('item_id', $item_id)->execute();

    $result = devconnect_user_process_queue_item($item);
    if ($result === TRUE) {
      db_delete('queue')->condition('item_id', $item_id)->execute();
      drupal_set_message(t('Developer was successfully saved to Edge.'));
    }
    else {
      db_update('queue')->fields(array('expire' => 0))->condition('item_id', $item_id)->execute();

      $retries = variable_get('developer_queue_retries_' . $item_id, 0);
      if ($retries == 0) {
        $which = t('first attempt');
      }
      elseif ($retries >= DEVCONNECT_USER_ASYNC_MAX_RETRIES) {
        $which = t('final attempt');
      }
      else {
        $which = t('retry #@retries', array('@retries' => $retries));
      }

      if ($retries >= DEVCONNECT_USER_ASYNC_MAX_RETRIES) {
        variable_del('developer_queue_retries_' . $item_id);
        db_delete('queue')->condition('item_id', $item_id)->execute();
        // Fire off an email.
        devconnect_user_notify_async_fail($item->data);
      }
      else {
        variable_set('developer_queue_retries_' . $item_id, $retries + 1);
      }
      drupal_set_message(t('Failed to save developer to Edge (@which)', array('@which' => $which)), 'error');
    }
  }
  drupal_goto('admin/config/people/developer-save-queue');
}

/**
 * Process individual developer queue item, saving it to Edge.
 *
 * Returns TRUE for success or array of data for failure. This is a standalone
 * function here so that it can also be a cron queue callback.
 *
 * @param array $item
 *
 * @return array|bool TRUE if successful, data array if not.
 */
function devconnect_user_process_queue_item($item) {
  if (is_object($item)) {
    if (is_array($item->data)) {
      $item = $item->data;
    }
    else {
      $item = @unserialize($item->data);
    }
  }
  $entity = new Drupal\devconnect_user\DeveloperEntity($item);
  $saved = entity_save('developer', $entity);
  $results = devconnect_get_debug_data();
  if (!$saved) {
    devconnect_default_org_config()->logger->error(print_r($results, TRUE));
    return $results;
  }

  foreach (module_implements('devconnect_user_save') as $module) {
    $function = $module . '_devconnect_user_save';
    $function($results, $item['#edit'], $item['#account']);
  }
  devconnect_default_org_config()->logger->debug(print_r($results, TRUE));
  return TRUE;
}

/**
 * Implements hook_cron_queue_info().
 *
 * Defines the developer queue so that cron can pick up any orphaned tasks.
 */
function devconnect_user_cron_queue_info() {
  $queues['developer'] = array(
    'worker callback' => 'devconnect_user_process_queue_item',
    'time' => 15,
    'skip on cron' => TRUE
  );
  return $queues;
}

/**
 * Generates the receiver mail addresses.
 *
 * @return array Array of email addresses to which notification mails are sent.
 */
function _devconnect_user_get_receiver_mails() {
  $notify_type = variable_get('async_fail_notify_type', 'Custom');
  $emails = array();
  $valid_emails = array();
  switch ($notify_type) {
    case 'Custom':
      $emails = explode(',', variable_get('async_fail_notify_mailto', variable_get('site_mail', ini_get('sendmail_from'))));
      break;

    case 'Both':
      $emails = explode(',', variable_get('async_fail_notify_mailto', variable_get('site_mail', ini_get('sendmail_from'))));
      // There is no break here for a reason.
    case 'Role':
      $roles = array_unique(variable_get('async_fail_notify_roles', array()));
      if (!empty($roles)) {
        $query = db_select('users', 'u');
        $query->innerJoin('users_roles', 'r', 'u.uid = r.uid');
        $role_emails = $query->condition('rid', $roles)
          ->condition('status', 1)
          ->distinct()
          ->execute()
          ->fetchCol();
        $emails = array_merge($emails, $role_emails);
      }
      break;
  }
  $emails = array_unique($emails);
  foreach ($emails as $email) {
    if (valid_email_address($email) && !preg_match('!^noreply@!', $email)) {
      $valid_emails[] = $email;
    }
  }
  return $valid_emails;
}

/**
 * Implements hook_mail().
 */
function devconnect_user_mail($key, &$message, $params) {
  if ($key == 'async-fail-notify-admin') {
    $message['subject'] = t('User failed to sync with Edge after @retries retries', array('@retries' => DEVCONNECT_USER_ASYNC_MAX_RETRIES));
    $body = t('User details as follows:') . "\n\n";

    $body .= "Email: " . $params['email'] . "\n"
      . "Name: " . $params['firstName'] . ' ' . $params['lastName'] . "\n"
      . "Username: " . $params['userName'] . "\n"
      . "Status: " . $params['active'] . "\n"
      . "User ID: " . $params['#user']['uid'];
    $message['body'][] = $body;
  }
}

/**
 * Generates the email.
 */
function devconnect_user_notify_async_fail($params) {
  if (function_exists('drush_log')) {
    drush_log(dt('Sending notification email'));
  }
  $emails = _devconnect_user_get_receiver_mails();
  if (empty($emails)) {
    if (function_exists('drush_log')) {
      drush_log(dt('No valid email addresses configured'), 'warning');
    }
    return;
  }
  $to = implode(', ', $emails);
  drupal_mail(
    'devconnect_user',
    'async-fail-notify-admin',
    $to,
    language_default(),
    $params,
    variable_get('site_mail', NULL),
    TRUE
  );
}
